# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AutoInvestmentView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'already_invested': 'bool',
        'countries': 'list[int]',
        'funds_invested': 'float',
        'id': 'int',
        'loan_type': 'list[int]',
        'loan_type_names': 'list[str]',
        'max_months_loan_end': 'int',
        'max_days_loan_end': 'int',
        'max_interest_rate': 'float',
        'max_loan_investment': 'float',
        'max_ltv': 'float',
        'min_months_loan_end': 'int',
        'min_days_loan_end': 'int',
        'min_interest_rate': 'float',
        'min_ltv': 'float',
        'originator': 'list[int]',
        'portfolio_name': 'str',
        'portfolio_size': 'float'
    }

    attribute_map = {
        'already_invested': 'already_invested',
        'countries': 'countries',
        'funds_invested': 'funds_invested',
        'id': 'id',
        'loan_type': 'loan_type',
        'loan_type_names': 'loan_type_names',
        'max_months_loan_end': 'maxMonthsLoanEnd',
        'max_days_loan_end': 'max_days_loan_end',
        'max_interest_rate': 'max_interest_rate',
        'max_loan_investment': 'max_loan_investment',
        'max_ltv': 'max_ltv',
        'min_months_loan_end': 'minMonthsLoanEnd',
        'min_days_loan_end': 'min_days_loan_end',
        'min_interest_rate': 'min_interest_rate',
        'min_ltv': 'min_ltv',
        'originator': 'originator',
        'portfolio_name': 'portfolio_name',
        'portfolio_size': 'portfolio_size'
    }

    def __init__(self, already_invested=None, countries=None, funds_invested=None, id=None, loan_type=None, loan_type_names=None, max_months_loan_end=None, max_days_loan_end=None, max_interest_rate=None, max_loan_investment=None, max_ltv=None, min_months_loan_end=None, min_days_loan_end=None, min_interest_rate=None, min_ltv=None, originator=None, portfolio_name=None, portfolio_size=None):  # noqa: E501
        """AutoInvestmentView - a model defined in Swagger"""  # noqa: E501

        self._already_invested = None
        self._countries = None
        self._funds_invested = None
        self._id = None
        self._loan_type = None
        self._loan_type_names = None
        self._max_months_loan_end = None
        self._max_days_loan_end = None
        self._max_interest_rate = None
        self._max_loan_investment = None
        self._max_ltv = None
        self._min_months_loan_end = None
        self._min_days_loan_end = None
        self._min_interest_rate = None
        self._min_ltv = None
        self._originator = None
        self._portfolio_name = None
        self._portfolio_size = None
        self.discriminator = None

        if already_invested is not None:
            self.already_invested = already_invested
        if countries is not None:
            self.countries = countries
        if funds_invested is not None:
            self.funds_invested = funds_invested
        if id is not None:
            self.id = id
        if loan_type is not None:
            self.loan_type = loan_type
        if loan_type_names is not None:
            self.loan_type_names = loan_type_names
        if max_months_loan_end is not None:
            self.max_months_loan_end = max_months_loan_end
        if max_days_loan_end is not None:
            self.max_days_loan_end = max_days_loan_end
        if max_interest_rate is not None:
            self.max_interest_rate = max_interest_rate
        if max_loan_investment is not None:
            self.max_loan_investment = max_loan_investment
        if max_ltv is not None:
            self.max_ltv = max_ltv
        if min_months_loan_end is not None:
            self.min_months_loan_end = min_months_loan_end
        if min_days_loan_end is not None:
            self.min_days_loan_end = min_days_loan_end
        if min_interest_rate is not None:
            self.min_interest_rate = min_interest_rate
        if min_ltv is not None:
            self.min_ltv = min_ltv
        if originator is not None:
            self.originator = originator
        if portfolio_name is not None:
            self.portfolio_name = portfolio_name
        if portfolio_size is not None:
            self.portfolio_size = portfolio_size

    @property
    def already_invested(self):
        """Gets the already_invested of this AutoInvestmentView.  # noqa: E501


        :return: The already_invested of this AutoInvestmentView.  # noqa: E501
        :rtype: bool
        """
        return self._already_invested

    @already_invested.setter
    def already_invested(self, already_invested):
        """Sets the already_invested of this AutoInvestmentView.


        :param already_invested: The already_invested of this AutoInvestmentView.  # noqa: E501
        :type: bool
        """

        self._already_invested = already_invested

    @property
    def countries(self):
        """Gets the countries of this AutoInvestmentView.  # noqa: E501


        :return: The countries of this AutoInvestmentView.  # noqa: E501
        :rtype: list[int]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this AutoInvestmentView.


        :param countries: The countries of this AutoInvestmentView.  # noqa: E501
        :type: list[int]
        """

        self._countries = countries

    @property
    def funds_invested(self):
        """Gets the funds_invested of this AutoInvestmentView.  # noqa: E501


        :return: The funds_invested of this AutoInvestmentView.  # noqa: E501
        :rtype: float
        """
        return self._funds_invested

    @funds_invested.setter
    def funds_invested(self, funds_invested):
        """Sets the funds_invested of this AutoInvestmentView.


        :param funds_invested: The funds_invested of this AutoInvestmentView.  # noqa: E501
        :type: float
        """

        self._funds_invested = funds_invested

    @property
    def id(self):
        """Gets the id of this AutoInvestmentView.  # noqa: E501


        :return: The id of this AutoInvestmentView.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutoInvestmentView.


        :param id: The id of this AutoInvestmentView.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def loan_type(self):
        """Gets the loan_type of this AutoInvestmentView.  # noqa: E501


        :return: The loan_type of this AutoInvestmentView.  # noqa: E501
        :rtype: list[int]
        """
        return self._loan_type

    @loan_type.setter
    def loan_type(self, loan_type):
        """Sets the loan_type of this AutoInvestmentView.


        :param loan_type: The loan_type of this AutoInvestmentView.  # noqa: E501
        :type: list[int]
        """

        self._loan_type = loan_type

    @property
    def loan_type_names(self):
        """Gets the loan_type_names of this AutoInvestmentView.  # noqa: E501


        :return: The loan_type_names of this AutoInvestmentView.  # noqa: E501
        :rtype: list[str]
        """
        return self._loan_type_names

    @loan_type_names.setter
    def loan_type_names(self, loan_type_names):
        """Sets the loan_type_names of this AutoInvestmentView.


        :param loan_type_names: The loan_type_names of this AutoInvestmentView.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["MORTGAGE", "CONSUMER", "INVOICE_FINANCING", "BUSINESS", "LINE_OF_CREDIT", "PAWNBROKING"]  # noqa: E501
        if not set(loan_type_names).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `loan_type_names` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(loan_type_names) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._loan_type_names = loan_type_names

    @property
    def max_months_loan_end(self):
        """Gets the max_months_loan_end of this AutoInvestmentView.  # noqa: E501


        :return: The max_months_loan_end of this AutoInvestmentView.  # noqa: E501
        :rtype: int
        """
        return self._max_months_loan_end

    @max_months_loan_end.setter
    def max_months_loan_end(self, max_months_loan_end):
        """Sets the max_months_loan_end of this AutoInvestmentView.


        :param max_months_loan_end: The max_months_loan_end of this AutoInvestmentView.  # noqa: E501
        :type: int
        """

        self._max_months_loan_end = max_months_loan_end

    @property
    def max_days_loan_end(self):
        """Gets the max_days_loan_end of this AutoInvestmentView.  # noqa: E501


        :return: The max_days_loan_end of this AutoInvestmentView.  # noqa: E501
        :rtype: int
        """
        return self._max_days_loan_end

    @max_days_loan_end.setter
    def max_days_loan_end(self, max_days_loan_end):
        """Sets the max_days_loan_end of this AutoInvestmentView.


        :param max_days_loan_end: The max_days_loan_end of this AutoInvestmentView.  # noqa: E501
        :type: int
        """

        self._max_days_loan_end = max_days_loan_end

    @property
    def max_interest_rate(self):
        """Gets the max_interest_rate of this AutoInvestmentView.  # noqa: E501


        :return: The max_interest_rate of this AutoInvestmentView.  # noqa: E501
        :rtype: float
        """
        return self._max_interest_rate

    @max_interest_rate.setter
    def max_interest_rate(self, max_interest_rate):
        """Sets the max_interest_rate of this AutoInvestmentView.


        :param max_interest_rate: The max_interest_rate of this AutoInvestmentView.  # noqa: E501
        :type: float
        """

        self._max_interest_rate = max_interest_rate

    @property
    def max_loan_investment(self):
        """Gets the max_loan_investment of this AutoInvestmentView.  # noqa: E501


        :return: The max_loan_investment of this AutoInvestmentView.  # noqa: E501
        :rtype: float
        """
        return self._max_loan_investment

    @max_loan_investment.setter
    def max_loan_investment(self, max_loan_investment):
        """Sets the max_loan_investment of this AutoInvestmentView.


        :param max_loan_investment: The max_loan_investment of this AutoInvestmentView.  # noqa: E501
        :type: float
        """

        self._max_loan_investment = max_loan_investment

    @property
    def max_ltv(self):
        """Gets the max_ltv of this AutoInvestmentView.  # noqa: E501


        :return: The max_ltv of this AutoInvestmentView.  # noqa: E501
        :rtype: float
        """
        return self._max_ltv

    @max_ltv.setter
    def max_ltv(self, max_ltv):
        """Sets the max_ltv of this AutoInvestmentView.


        :param max_ltv: The max_ltv of this AutoInvestmentView.  # noqa: E501
        :type: float
        """

        self._max_ltv = max_ltv

    @property
    def min_months_loan_end(self):
        """Gets the min_months_loan_end of this AutoInvestmentView.  # noqa: E501


        :return: The min_months_loan_end of this AutoInvestmentView.  # noqa: E501
        :rtype: int
        """
        return self._min_months_loan_end

    @min_months_loan_end.setter
    def min_months_loan_end(self, min_months_loan_end):
        """Sets the min_months_loan_end of this AutoInvestmentView.


        :param min_months_loan_end: The min_months_loan_end of this AutoInvestmentView.  # noqa: E501
        :type: int
        """

        self._min_months_loan_end = min_months_loan_end

    @property
    def min_days_loan_end(self):
        """Gets the min_days_loan_end of this AutoInvestmentView.  # noqa: E501


        :return: The min_days_loan_end of this AutoInvestmentView.  # noqa: E501
        :rtype: int
        """
        return self._min_days_loan_end

    @min_days_loan_end.setter
    def min_days_loan_end(self, min_days_loan_end):
        """Sets the min_days_loan_end of this AutoInvestmentView.


        :param min_days_loan_end: The min_days_loan_end of this AutoInvestmentView.  # noqa: E501
        :type: int
        """

        self._min_days_loan_end = min_days_loan_end

    @property
    def min_interest_rate(self):
        """Gets the min_interest_rate of this AutoInvestmentView.  # noqa: E501


        :return: The min_interest_rate of this AutoInvestmentView.  # noqa: E501
        :rtype: float
        """
        return self._min_interest_rate

    @min_interest_rate.setter
    def min_interest_rate(self, min_interest_rate):
        """Sets the min_interest_rate of this AutoInvestmentView.


        :param min_interest_rate: The min_interest_rate of this AutoInvestmentView.  # noqa: E501
        :type: float
        """

        self._min_interest_rate = min_interest_rate

    @property
    def min_ltv(self):
        """Gets the min_ltv of this AutoInvestmentView.  # noqa: E501


        :return: The min_ltv of this AutoInvestmentView.  # noqa: E501
        :rtype: float
        """
        return self._min_ltv

    @min_ltv.setter
    def min_ltv(self, min_ltv):
        """Sets the min_ltv of this AutoInvestmentView.


        :param min_ltv: The min_ltv of this AutoInvestmentView.  # noqa: E501
        :type: float
        """

        self._min_ltv = min_ltv

    @property
    def originator(self):
        """Gets the originator of this AutoInvestmentView.  # noqa: E501


        :return: The originator of this AutoInvestmentView.  # noqa: E501
        :rtype: list[int]
        """
        return self._originator

    @originator.setter
    def originator(self, originator):
        """Sets the originator of this AutoInvestmentView.


        :param originator: The originator of this AutoInvestmentView.  # noqa: E501
        :type: list[int]
        """

        self._originator = originator

    @property
    def portfolio_name(self):
        """Gets the portfolio_name of this AutoInvestmentView.  # noqa: E501


        :return: The portfolio_name of this AutoInvestmentView.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_name

    @portfolio_name.setter
    def portfolio_name(self, portfolio_name):
        """Sets the portfolio_name of this AutoInvestmentView.


        :param portfolio_name: The portfolio_name of this AutoInvestmentView.  # noqa: E501
        :type: str
        """

        self._portfolio_name = portfolio_name

    @property
    def portfolio_size(self):
        """Gets the portfolio_size of this AutoInvestmentView.  # noqa: E501


        :return: The portfolio_size of this AutoInvestmentView.  # noqa: E501
        :rtype: float
        """
        return self._portfolio_size

    @portfolio_size.setter
    def portfolio_size(self, portfolio_size):
        """Sets the portfolio_size of this AutoInvestmentView.


        :param portfolio_size: The portfolio_size of this AutoInvestmentView.  # noqa: E501
        :type: float
        """

        self._portfolio_size = portfolio_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutoInvestmentView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoInvestmentView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
