# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AutoInvestment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'already_invested': 'bool',
        'funds_invested': 'float',
        'id': 'int',
        'investments_number': 'int',
        'max_interest_rate': 'float',
        'max_loan_investment': 'float',
        'min_interest_rate': 'float',
        'portfolio_name': 'str',
        'portfolio_size': 'float',
        'status': 'int'
    }

    attribute_map = {
        'already_invested': 'already_invested',
        'funds_invested': 'funds_invested',
        'id': 'id',
        'investments_number': 'investments_number',
        'max_interest_rate': 'max_interest_rate',
        'max_loan_investment': 'max_loan_investment',
        'min_interest_rate': 'min_interest_rate',
        'portfolio_name': 'portfolio_name',
        'portfolio_size': 'portfolio_size',
        'status': 'status'
    }

    def __init__(self, already_invested=None, funds_invested=None, id=None, investments_number=None, max_interest_rate=None, max_loan_investment=None, min_interest_rate=None, portfolio_name=None, portfolio_size=None, status=None):  # noqa: E501
        """AutoInvestment - a model defined in Swagger"""  # noqa: E501

        self._already_invested = None
        self._funds_invested = None
        self._id = None
        self._investments_number = None
        self._max_interest_rate = None
        self._max_loan_investment = None
        self._min_interest_rate = None
        self._portfolio_name = None
        self._portfolio_size = None
        self._status = None
        self.discriminator = None

        if already_invested is not None:
            self.already_invested = already_invested
        if funds_invested is not None:
            self.funds_invested = funds_invested
        if id is not None:
            self.id = id
        if investments_number is not None:
            self.investments_number = investments_number
        if max_interest_rate is not None:
            self.max_interest_rate = max_interest_rate
        if max_loan_investment is not None:
            self.max_loan_investment = max_loan_investment
        if min_interest_rate is not None:
            self.min_interest_rate = min_interest_rate
        if portfolio_name is not None:
            self.portfolio_name = portfolio_name
        if portfolio_size is not None:
            self.portfolio_size = portfolio_size
        if status is not None:
            self.status = status

    @property
    def already_invested(self):
        """Gets the already_invested of this AutoInvestment.  # noqa: E501


        :return: The already_invested of this AutoInvestment.  # noqa: E501
        :rtype: bool
        """
        return self._already_invested

    @already_invested.setter
    def already_invested(self, already_invested):
        """Sets the already_invested of this AutoInvestment.


        :param already_invested: The already_invested of this AutoInvestment.  # noqa: E501
        :type: bool
        """

        self._already_invested = already_invested

    @property
    def funds_invested(self):
        """Gets the funds_invested of this AutoInvestment.  # noqa: E501


        :return: The funds_invested of this AutoInvestment.  # noqa: E501
        :rtype: float
        """
        return self._funds_invested

    @funds_invested.setter
    def funds_invested(self, funds_invested):
        """Sets the funds_invested of this AutoInvestment.


        :param funds_invested: The funds_invested of this AutoInvestment.  # noqa: E501
        :type: float
        """

        self._funds_invested = funds_invested

    @property
    def id(self):
        """Gets the id of this AutoInvestment.  # noqa: E501


        :return: The id of this AutoInvestment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutoInvestment.


        :param id: The id of this AutoInvestment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def investments_number(self):
        """Gets the investments_number of this AutoInvestment.  # noqa: E501


        :return: The investments_number of this AutoInvestment.  # noqa: E501
        :rtype: int
        """
        return self._investments_number

    @investments_number.setter
    def investments_number(self, investments_number):
        """Sets the investments_number of this AutoInvestment.


        :param investments_number: The investments_number of this AutoInvestment.  # noqa: E501
        :type: int
        """

        self._investments_number = investments_number

    @property
    def max_interest_rate(self):
        """Gets the max_interest_rate of this AutoInvestment.  # noqa: E501


        :return: The max_interest_rate of this AutoInvestment.  # noqa: E501
        :rtype: float
        """
        return self._max_interest_rate

    @max_interest_rate.setter
    def max_interest_rate(self, max_interest_rate):
        """Sets the max_interest_rate of this AutoInvestment.


        :param max_interest_rate: The max_interest_rate of this AutoInvestment.  # noqa: E501
        :type: float
        """

        self._max_interest_rate = max_interest_rate

    @property
    def max_loan_investment(self):
        """Gets the max_loan_investment of this AutoInvestment.  # noqa: E501


        :return: The max_loan_investment of this AutoInvestment.  # noqa: E501
        :rtype: float
        """
        return self._max_loan_investment

    @max_loan_investment.setter
    def max_loan_investment(self, max_loan_investment):
        """Sets the max_loan_investment of this AutoInvestment.


        :param max_loan_investment: The max_loan_investment of this AutoInvestment.  # noqa: E501
        :type: float
        """

        self._max_loan_investment = max_loan_investment

    @property
    def min_interest_rate(self):
        """Gets the min_interest_rate of this AutoInvestment.  # noqa: E501


        :return: The min_interest_rate of this AutoInvestment.  # noqa: E501
        :rtype: float
        """
        return self._min_interest_rate

    @min_interest_rate.setter
    def min_interest_rate(self, min_interest_rate):
        """Sets the min_interest_rate of this AutoInvestment.


        :param min_interest_rate: The min_interest_rate of this AutoInvestment.  # noqa: E501
        :type: float
        """

        self._min_interest_rate = min_interest_rate

    @property
    def portfolio_name(self):
        """Gets the portfolio_name of this AutoInvestment.  # noqa: E501


        :return: The portfolio_name of this AutoInvestment.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_name

    @portfolio_name.setter
    def portfolio_name(self, portfolio_name):
        """Sets the portfolio_name of this AutoInvestment.


        :param portfolio_name: The portfolio_name of this AutoInvestment.  # noqa: E501
        :type: str
        """

        self._portfolio_name = portfolio_name

    @property
    def portfolio_size(self):
        """Gets the portfolio_size of this AutoInvestment.  # noqa: E501


        :return: The portfolio_size of this AutoInvestment.  # noqa: E501
        :rtype: float
        """
        return self._portfolio_size

    @portfolio_size.setter
    def portfolio_size(self, portfolio_size):
        """Sets the portfolio_size of this AutoInvestment.


        :param portfolio_size: The portfolio_size of this AutoInvestment.  # noqa: E501
        :type: float
        """

        self._portfolio_size = portfolio_size

    @property
    def status(self):
        """Gets the status of this AutoInvestment.  # noqa: E501


        :return: The status of this AutoInvestment.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AutoInvestment.


        :param status: The status of this AutoInvestment.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutoInvestment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoInvestment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
