# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'str',
        'file_binary': 'str',
        'fk_customer_id': 'int',
        'id': 'int'
    }

    attribute_map = {
        'file': 'file',
        'file_binary': 'file_binary',
        'fk_customer_id': 'fk_customer_id',
        'id': 'id'
    }

    def __init__(self, file=None, file_binary=None, fk_customer_id=None, id=None):  # noqa: E501
        """UserDocument - a model defined in Swagger"""  # noqa: E501

        self._file = None
        self._file_binary = None
        self._fk_customer_id = None
        self._id = None
        self.discriminator = None

        if file is not None:
            self.file = file
        if file_binary is not None:
            self.file_binary = file_binary
        if fk_customer_id is not None:
            self.fk_customer_id = fk_customer_id
        if id is not None:
            self.id = id

    @property
    def file(self):
        """Gets the file of this UserDocument.  # noqa: E501


        :return: The file of this UserDocument.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this UserDocument.


        :param file: The file of this UserDocument.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def file_binary(self):
        """Gets the file_binary of this UserDocument.  # noqa: E501


        :return: The file_binary of this UserDocument.  # noqa: E501
        :rtype: str
        """
        return self._file_binary

    @file_binary.setter
    def file_binary(self, file_binary):
        """Sets the file_binary of this UserDocument.


        :param file_binary: The file_binary of this UserDocument.  # noqa: E501
        :type: str
        """

        self._file_binary = file_binary

    @property
    def fk_customer_id(self):
        """Gets the fk_customer_id of this UserDocument.  # noqa: E501


        :return: The fk_customer_id of this UserDocument.  # noqa: E501
        :rtype: int
        """
        return self._fk_customer_id

    @fk_customer_id.setter
    def fk_customer_id(self, fk_customer_id):
        """Sets the fk_customer_id of this UserDocument.


        :param fk_customer_id: The fk_customer_id of this UserDocument.  # noqa: E501
        :type: int
        """

        self._fk_customer_id = fk_customer_id

    @property
    def id(self):
        """Gets the id of this UserDocument.  # noqa: E501


        :return: The id of this UserDocument.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDocument.


        :param id: The id of this UserDocument.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
