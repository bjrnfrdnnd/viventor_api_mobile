# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Payment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amortization_payment': 'float',
        'carency_payment': 'float',
        'deal_id': 'int',
        'id': 'int',
        'monthly_payment': 'float',
        'outstanding': 'float',
        'payment_date': 'date',
        'quota': 'int',
        'status': 'str'
    }

    attribute_map = {
        'amortization_payment': 'amortization_payment',
        'carency_payment': 'carency_payment',
        'deal_id': 'deal_id',
        'id': 'id',
        'monthly_payment': 'monthly_payment',
        'outstanding': 'outstanding',
        'payment_date': 'payment_date',
        'quota': 'quota',
        'status': 'status'
    }

    def __init__(self, amortization_payment=None, carency_payment=None, deal_id=None, id=None, monthly_payment=None, outstanding=None, payment_date=None, quota=None, status=None):  # noqa: E501
        """Payment - a model defined in Swagger"""  # noqa: E501

        self._amortization_payment = None
        self._carency_payment = None
        self._deal_id = None
        self._id = None
        self._monthly_payment = None
        self._outstanding = None
        self._payment_date = None
        self._quota = None
        self._status = None
        self.discriminator = None

        if amortization_payment is not None:
            self.amortization_payment = amortization_payment
        if carency_payment is not None:
            self.carency_payment = carency_payment
        if deal_id is not None:
            self.deal_id = deal_id
        if id is not None:
            self.id = id
        if monthly_payment is not None:
            self.monthly_payment = monthly_payment
        if outstanding is not None:
            self.outstanding = outstanding
        if payment_date is not None:
            self.payment_date = payment_date
        if quota is not None:
            self.quota = quota
        if status is not None:
            self.status = status

    @property
    def amortization_payment(self):
        """Gets the amortization_payment of this Payment.  # noqa: E501


        :return: The amortization_payment of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._amortization_payment

    @amortization_payment.setter
    def amortization_payment(self, amortization_payment):
        """Sets the amortization_payment of this Payment.


        :param amortization_payment: The amortization_payment of this Payment.  # noqa: E501
        :type: float
        """

        self._amortization_payment = amortization_payment

    @property
    def carency_payment(self):
        """Gets the carency_payment of this Payment.  # noqa: E501


        :return: The carency_payment of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._carency_payment

    @carency_payment.setter
    def carency_payment(self, carency_payment):
        """Sets the carency_payment of this Payment.


        :param carency_payment: The carency_payment of this Payment.  # noqa: E501
        :type: float
        """

        self._carency_payment = carency_payment

    @property
    def deal_id(self):
        """Gets the deal_id of this Payment.  # noqa: E501


        :return: The deal_id of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._deal_id

    @deal_id.setter
    def deal_id(self, deal_id):
        """Sets the deal_id of this Payment.


        :param deal_id: The deal_id of this Payment.  # noqa: E501
        :type: int
        """

        self._deal_id = deal_id

    @property
    def id(self):
        """Gets the id of this Payment.  # noqa: E501


        :return: The id of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.


        :param id: The id of this Payment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def monthly_payment(self):
        """Gets the monthly_payment of this Payment.  # noqa: E501


        :return: The monthly_payment of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._monthly_payment

    @monthly_payment.setter
    def monthly_payment(self, monthly_payment):
        """Sets the monthly_payment of this Payment.


        :param monthly_payment: The monthly_payment of this Payment.  # noqa: E501
        :type: float
        """

        self._monthly_payment = monthly_payment

    @property
    def outstanding(self):
        """Gets the outstanding of this Payment.  # noqa: E501


        :return: The outstanding of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._outstanding

    @outstanding.setter
    def outstanding(self, outstanding):
        """Sets the outstanding of this Payment.


        :param outstanding: The outstanding of this Payment.  # noqa: E501
        :type: float
        """

        self._outstanding = outstanding

    @property
    def payment_date(self):
        """Gets the payment_date of this Payment.  # noqa: E501


        :return: The payment_date of this Payment.  # noqa: E501
        :rtype: date
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this Payment.


        :param payment_date: The payment_date of this Payment.  # noqa: E501
        :type: date
        """

        self._payment_date = payment_date

    @property
    def quota(self):
        """Gets the quota of this Payment.  # noqa: E501


        :return: The quota of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this Payment.


        :param quota: The quota of this Payment.  # noqa: E501
        :type: int
        """

        self._quota = quota

    @property
    def status(self):
        """Gets the status of this Payment.  # noqa: E501


        :return: The status of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Payment.


        :param status: The status of this Payment.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Payment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
