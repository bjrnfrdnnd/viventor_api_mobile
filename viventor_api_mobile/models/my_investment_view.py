# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MyInvestmentView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collateral': 'Collateral',
        'company': 'Company',
        'consumer': 'Consumer',
        'factoring': 'Factoring',
        'generic': 'Generic',
        'invoice': 'Invoice',
        'loan_graf_data': 'LoanGrafData',
        'my_investment': 'Investment',
        'payments': 'list[Payment]',
        'primary_view': 'LoanViewPrimary',
        'schedule': 'Schedule'
    }

    attribute_map = {
        'collateral': 'collateral',
        'company': 'company',
        'consumer': 'consumer',
        'factoring': 'factoring',
        'generic': 'generic',
        'invoice': 'invoice',
        'loan_graf_data': 'loan_graf_data',
        'my_investment': 'my_investment',
        'payments': 'payments',
        'primary_view': 'primary_view',
        'schedule': 'schedule'
    }

    def __init__(self, collateral=None, company=None, consumer=None, factoring=None, generic=None, invoice=None, loan_graf_data=None, my_investment=None, payments=None, primary_view=None, schedule=None):  # noqa: E501
        """MyInvestmentView - a model defined in Swagger"""  # noqa: E501

        self._collateral = None
        self._company = None
        self._consumer = None
        self._factoring = None
        self._generic = None
        self._invoice = None
        self._loan_graf_data = None
        self._my_investment = None
        self._payments = None
        self._primary_view = None
        self._schedule = None
        self.discriminator = None

        if collateral is not None:
            self.collateral = collateral
        if company is not None:
            self.company = company
        if consumer is not None:
            self.consumer = consumer
        if factoring is not None:
            self.factoring = factoring
        if generic is not None:
            self.generic = generic
        if invoice is not None:
            self.invoice = invoice
        if loan_graf_data is not None:
            self.loan_graf_data = loan_graf_data
        if my_investment is not None:
            self.my_investment = my_investment
        if payments is not None:
            self.payments = payments
        if primary_view is not None:
            self.primary_view = primary_view
        if schedule is not None:
            self.schedule = schedule

    @property
    def collateral(self):
        """Gets the collateral of this MyInvestmentView.  # noqa: E501


        :return: The collateral of this MyInvestmentView.  # noqa: E501
        :rtype: Collateral
        """
        return self._collateral

    @collateral.setter
    def collateral(self, collateral):
        """Sets the collateral of this MyInvestmentView.


        :param collateral: The collateral of this MyInvestmentView.  # noqa: E501
        :type: Collateral
        """

        self._collateral = collateral

    @property
    def company(self):
        """Gets the company of this MyInvestmentView.  # noqa: E501


        :return: The company of this MyInvestmentView.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this MyInvestmentView.


        :param company: The company of this MyInvestmentView.  # noqa: E501
        :type: Company
        """

        self._company = company

    @property
    def consumer(self):
        """Gets the consumer of this MyInvestmentView.  # noqa: E501


        :return: The consumer of this MyInvestmentView.  # noqa: E501
        :rtype: Consumer
        """
        return self._consumer

    @consumer.setter
    def consumer(self, consumer):
        """Sets the consumer of this MyInvestmentView.


        :param consumer: The consumer of this MyInvestmentView.  # noqa: E501
        :type: Consumer
        """

        self._consumer = consumer

    @property
    def factoring(self):
        """Gets the factoring of this MyInvestmentView.  # noqa: E501


        :return: The factoring of this MyInvestmentView.  # noqa: E501
        :rtype: Factoring
        """
        return self._factoring

    @factoring.setter
    def factoring(self, factoring):
        """Sets the factoring of this MyInvestmentView.


        :param factoring: The factoring of this MyInvestmentView.  # noqa: E501
        :type: Factoring
        """

        self._factoring = factoring

    @property
    def generic(self):
        """Gets the generic of this MyInvestmentView.  # noqa: E501


        :return: The generic of this MyInvestmentView.  # noqa: E501
        :rtype: Generic
        """
        return self._generic

    @generic.setter
    def generic(self, generic):
        """Sets the generic of this MyInvestmentView.


        :param generic: The generic of this MyInvestmentView.  # noqa: E501
        :type: Generic
        """

        self._generic = generic

    @property
    def invoice(self):
        """Gets the invoice of this MyInvestmentView.  # noqa: E501


        :return: The invoice of this MyInvestmentView.  # noqa: E501
        :rtype: Invoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this MyInvestmentView.


        :param invoice: The invoice of this MyInvestmentView.  # noqa: E501
        :type: Invoice
        """

        self._invoice = invoice

    @property
    def loan_graf_data(self):
        """Gets the loan_graf_data of this MyInvestmentView.  # noqa: E501


        :return: The loan_graf_data of this MyInvestmentView.  # noqa: E501
        :rtype: LoanGrafData
        """
        return self._loan_graf_data

    @loan_graf_data.setter
    def loan_graf_data(self, loan_graf_data):
        """Sets the loan_graf_data of this MyInvestmentView.


        :param loan_graf_data: The loan_graf_data of this MyInvestmentView.  # noqa: E501
        :type: LoanGrafData
        """

        self._loan_graf_data = loan_graf_data

    @property
    def my_investment(self):
        """Gets the my_investment of this MyInvestmentView.  # noqa: E501


        :return: The my_investment of this MyInvestmentView.  # noqa: E501
        :rtype: Investment
        """
        return self._my_investment

    @my_investment.setter
    def my_investment(self, my_investment):
        """Sets the my_investment of this MyInvestmentView.


        :param my_investment: The my_investment of this MyInvestmentView.  # noqa: E501
        :type: Investment
        """

        self._my_investment = my_investment

    @property
    def payments(self):
        """Gets the payments of this MyInvestmentView.  # noqa: E501


        :return: The payments of this MyInvestmentView.  # noqa: E501
        :rtype: list[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this MyInvestmentView.


        :param payments: The payments of this MyInvestmentView.  # noqa: E501
        :type: list[Payment]
        """

        self._payments = payments

    @property
    def primary_view(self):
        """Gets the primary_view of this MyInvestmentView.  # noqa: E501


        :return: The primary_view of this MyInvestmentView.  # noqa: E501
        :rtype: LoanViewPrimary
        """
        return self._primary_view

    @primary_view.setter
    def primary_view(self, primary_view):
        """Sets the primary_view of this MyInvestmentView.


        :param primary_view: The primary_view of this MyInvestmentView.  # noqa: E501
        :type: LoanViewPrimary
        """

        self._primary_view = primary_view

    @property
    def schedule(self):
        """Gets the schedule of this MyInvestmentView.  # noqa: E501


        :return: The schedule of this MyInvestmentView.  # noqa: E501
        :rtype: Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this MyInvestmentView.


        :param schedule: The schedule of this MyInvestmentView.  # noqa: E501
        :type: Schedule
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MyInvestmentView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MyInvestmentView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
