# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FilterOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'borrower_types': 'list[str]',
        'buyback': 'bool',
        'buyback_multi_select': 'list[int]',
        'collateral_types': 'list[str]',
        'countries': 'list[int]',
        'current_page': 'int',
        'field': 'str',
        'include_available_loans': 'bool',
        'include_fully_invested_loans': 'bool',
        'include_loan_attachments': 'bool',
        'loan_attachment_types': 'list[str]',
        'loan_extended': 'list[str]',
        'loan_extended_multi_select': 'list[int]',
        'loan_rating_names': 'list[str]',
        'loan_status': 'int',
        'loan_status_multi_select': 'list[int]',
        'loan_type': 'int',
        'loan_type_multi_select': 'list[int]',
        'loan_type_names': 'list[str]',
        'max_interest': 'float',
        'max_loan_term': 'int',
        'max_ltv': 'float',
        'min_interest': 'float',
        'min_loan_term': 'int',
        'min_ltv': 'float',
        'my_investment': 'bool',
        'originator': 'list[int]',
        'pages': 'int',
        'schedule_types': 'list[str]',
        'sort': 'str'
    }

    attribute_map = {
        'borrower_types': 'borrowerTypes',
        'buyback': 'buyback',
        'buyback_multi_select': 'buybackMultiSelect',
        'collateral_types': 'collateralTypes',
        'countries': 'countries',
        'current_page': 'currentPage',
        'field': 'field',
        'include_available_loans': 'includeAvailableLoans',
        'include_fully_invested_loans': 'includeFullyInvestedLoans',
        'include_loan_attachments': 'includeLoanAttachments',
        'loan_attachment_types': 'loanAttachmentTypes',
        'loan_extended': 'loanExtended',
        'loan_extended_multi_select': 'loanExtendedMultiSelect',
        'loan_rating_names': 'loanRatingNames',
        'loan_status': 'loanStatus',
        'loan_status_multi_select': 'loanStatusMultiSelect',
        'loan_type': 'loanType',
        'loan_type_multi_select': 'loanTypeMultiSelect',
        'loan_type_names': 'loanTypeNames',
        'max_interest': 'maxInterest',
        'max_loan_term': 'maxLoanTerm',
        'max_ltv': 'maxLtv',
        'min_interest': 'minInterest',
        'min_loan_term': 'minLoanTerm',
        'min_ltv': 'minLtv',
        'my_investment': 'myInvestment',
        'originator': 'originator',
        'pages': 'pages',
        'schedule_types': 'scheduleTypes',
        'sort': 'sort'
    }

    def __init__(self, borrower_types=None, buyback=None, buyback_multi_select=None, collateral_types=None, countries=None, current_page=None, field=None, include_available_loans=None, include_fully_invested_loans=None, include_loan_attachments=None, loan_attachment_types=None, loan_extended=None, loan_extended_multi_select=None, loan_rating_names=None, loan_status=None, loan_status_multi_select=None, loan_type=None, loan_type_multi_select=None, loan_type_names=None, max_interest=None, max_loan_term=None, max_ltv=None, min_interest=None, min_loan_term=None, min_ltv=None, my_investment=None, originator=None, pages=None, schedule_types=None, sort=None):  # noqa: E501
        """FilterOptions - a model defined in Swagger"""  # noqa: E501

        self._borrower_types = None
        self._buyback = None
        self._buyback_multi_select = None
        self._collateral_types = None
        self._countries = None
        self._current_page = None
        self._field = None
        self._include_available_loans = None
        self._include_fully_invested_loans = None
        self._include_loan_attachments = None
        self._loan_attachment_types = None
        self._loan_extended = None
        self._loan_extended_multi_select = None
        self._loan_rating_names = None
        self._loan_status = None
        self._loan_status_multi_select = None
        self._loan_type = None
        self._loan_type_multi_select = None
        self._loan_type_names = None
        self._max_interest = None
        self._max_loan_term = None
        self._max_ltv = None
        self._min_interest = None
        self._min_loan_term = None
        self._min_ltv = None
        self._my_investment = None
        self._originator = None
        self._pages = None
        self._schedule_types = None
        self._sort = None
        self.discriminator = None

        if borrower_types is not None:
            self.borrower_types = borrower_types
        if buyback is not None:
            self.buyback = buyback
        if buyback_multi_select is not None:
            self.buyback_multi_select = buyback_multi_select
        if collateral_types is not None:
            self.collateral_types = collateral_types
        if countries is not None:
            self.countries = countries
        if current_page is not None:
            self.current_page = current_page
        if field is not None:
            self.field = field
        if include_available_loans is not None:
            self.include_available_loans = include_available_loans
        if include_fully_invested_loans is not None:
            self.include_fully_invested_loans = include_fully_invested_loans
        if include_loan_attachments is not None:
            self.include_loan_attachments = include_loan_attachments
        if loan_attachment_types is not None:
            self.loan_attachment_types = loan_attachment_types
        if loan_extended is not None:
            self.loan_extended = loan_extended
        if loan_extended_multi_select is not None:
            self.loan_extended_multi_select = loan_extended_multi_select
        if loan_rating_names is not None:
            self.loan_rating_names = loan_rating_names
        if loan_status is not None:
            self.loan_status = loan_status
        if loan_status_multi_select is not None:
            self.loan_status_multi_select = loan_status_multi_select
        if loan_type is not None:
            self.loan_type = loan_type
        if loan_type_multi_select is not None:
            self.loan_type_multi_select = loan_type_multi_select
        if loan_type_names is not None:
            self.loan_type_names = loan_type_names
        if max_interest is not None:
            self.max_interest = max_interest
        if max_loan_term is not None:
            self.max_loan_term = max_loan_term
        if max_ltv is not None:
            self.max_ltv = max_ltv
        if min_interest is not None:
            self.min_interest = min_interest
        if min_loan_term is not None:
            self.min_loan_term = min_loan_term
        if min_ltv is not None:
            self.min_ltv = min_ltv
        if my_investment is not None:
            self.my_investment = my_investment
        if originator is not None:
            self.originator = originator
        if pages is not None:
            self.pages = pages
        if schedule_types is not None:
            self.schedule_types = schedule_types
        if sort is not None:
            self.sort = sort

    @property
    def borrower_types(self):
        """Gets the borrower_types of this FilterOptions.  # noqa: E501


        :return: The borrower_types of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._borrower_types

    @borrower_types.setter
    def borrower_types(self, borrower_types):
        """Sets the borrower_types of this FilterOptions.


        :param borrower_types: The borrower_types of this FilterOptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CONSUMER", "FACTORING", "COMPANY"]  # noqa: E501
        if not set(borrower_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `borrower_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(borrower_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._borrower_types = borrower_types

    @property
    def buyback(self):
        """Gets the buyback of this FilterOptions.  # noqa: E501


        :return: The buyback of this FilterOptions.  # noqa: E501
        :rtype: bool
        """
        return self._buyback

    @buyback.setter
    def buyback(self, buyback):
        """Sets the buyback of this FilterOptions.


        :param buyback: The buyback of this FilterOptions.  # noqa: E501
        :type: bool
        """

        self._buyback = buyback

    @property
    def buyback_multi_select(self):
        """Gets the buyback_multi_select of this FilterOptions.  # noqa: E501


        :return: The buyback_multi_select of this FilterOptions.  # noqa: E501
        :rtype: list[int]
        """
        return self._buyback_multi_select

    @buyback_multi_select.setter
    def buyback_multi_select(self, buyback_multi_select):
        """Sets the buyback_multi_select of this FilterOptions.


        :param buyback_multi_select: The buyback_multi_select of this FilterOptions.  # noqa: E501
        :type: list[int]
        """

        self._buyback_multi_select = buyback_multi_select

    @property
    def collateral_types(self):
        """Gets the collateral_types of this FilterOptions.  # noqa: E501


        :return: The collateral_types of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._collateral_types

    @collateral_types.setter
    def collateral_types(self, collateral_types):
        """Sets the collateral_types of this FilterOptions.


        :param collateral_types: The collateral_types of this FilterOptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NONE", "REALTY", "INVOICE", "GENERIC"]  # noqa: E501
        if not set(collateral_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `collateral_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(collateral_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._collateral_types = collateral_types

    @property
    def countries(self):
        """Gets the countries of this FilterOptions.  # noqa: E501


        :return: The countries of this FilterOptions.  # noqa: E501
        :rtype: list[int]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this FilterOptions.


        :param countries: The countries of this FilterOptions.  # noqa: E501
        :type: list[int]
        """

        self._countries = countries

    @property
    def current_page(self):
        """Gets the current_page of this FilterOptions.  # noqa: E501


        :return: The current_page of this FilterOptions.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this FilterOptions.


        :param current_page: The current_page of this FilterOptions.  # noqa: E501
        :type: int
        """

        self._current_page = current_page

    @property
    def field(self):
        """Gets the field of this FilterOptions.  # noqa: E501


        :return: The field of this FilterOptions.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this FilterOptions.


        :param field: The field of this FilterOptions.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def include_available_loans(self):
        """Gets the include_available_loans of this FilterOptions.  # noqa: E501


        :return: The include_available_loans of this FilterOptions.  # noqa: E501
        :rtype: bool
        """
        return self._include_available_loans

    @include_available_loans.setter
    def include_available_loans(self, include_available_loans):
        """Sets the include_available_loans of this FilterOptions.


        :param include_available_loans: The include_available_loans of this FilterOptions.  # noqa: E501
        :type: bool
        """

        self._include_available_loans = include_available_loans

    @property
    def include_fully_invested_loans(self):
        """Gets the include_fully_invested_loans of this FilterOptions.  # noqa: E501


        :return: The include_fully_invested_loans of this FilterOptions.  # noqa: E501
        :rtype: bool
        """
        return self._include_fully_invested_loans

    @include_fully_invested_loans.setter
    def include_fully_invested_loans(self, include_fully_invested_loans):
        """Sets the include_fully_invested_loans of this FilterOptions.


        :param include_fully_invested_loans: The include_fully_invested_loans of this FilterOptions.  # noqa: E501
        :type: bool
        """

        self._include_fully_invested_loans = include_fully_invested_loans

    @property
    def include_loan_attachments(self):
        """Gets the include_loan_attachments of this FilterOptions.  # noqa: E501


        :return: The include_loan_attachments of this FilterOptions.  # noqa: E501
        :rtype: bool
        """
        return self._include_loan_attachments

    @include_loan_attachments.setter
    def include_loan_attachments(self, include_loan_attachments):
        """Sets the include_loan_attachments of this FilterOptions.


        :param include_loan_attachments: The include_loan_attachments of this FilterOptions.  # noqa: E501
        :type: bool
        """

        self._include_loan_attachments = include_loan_attachments

    @property
    def loan_attachment_types(self):
        """Gets the loan_attachment_types of this FilterOptions.  # noqa: E501


        :return: The loan_attachment_types of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._loan_attachment_types

    @loan_attachment_types.setter
    def loan_attachment_types(self, loan_attachment_types):
        """Sets the loan_attachment_types of this FilterOptions.


        :param loan_attachment_types: The loan_attachment_types of this FilterOptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["LOAN_DETAILS", "MAIN_IMAGE", "GALLERY_IMAGE"]  # noqa: E501
        if not set(loan_attachment_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `loan_attachment_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(loan_attachment_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._loan_attachment_types = loan_attachment_types

    @property
    def loan_extended(self):
        """Gets the loan_extended of this FilterOptions.  # noqa: E501


        :return: The loan_extended of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._loan_extended

    @loan_extended.setter
    def loan_extended(self, loan_extended):
        """Sets the loan_extended of this FilterOptions.


        :param loan_extended: The loan_extended of this FilterOptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if not set(loan_extended).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `loan_extended` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(loan_extended) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._loan_extended = loan_extended

    @property
    def loan_extended_multi_select(self):
        """Gets the loan_extended_multi_select of this FilterOptions.  # noqa: E501


        :return: The loan_extended_multi_select of this FilterOptions.  # noqa: E501
        :rtype: list[int]
        """
        return self._loan_extended_multi_select

    @loan_extended_multi_select.setter
    def loan_extended_multi_select(self, loan_extended_multi_select):
        """Sets the loan_extended_multi_select of this FilterOptions.


        :param loan_extended_multi_select: The loan_extended_multi_select of this FilterOptions.  # noqa: E501
        :type: list[int]
        """

        self._loan_extended_multi_select = loan_extended_multi_select

    @property
    def loan_rating_names(self):
        """Gets the loan_rating_names of this FilterOptions.  # noqa: E501


        :return: The loan_rating_names of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._loan_rating_names

    @loan_rating_names.setter
    def loan_rating_names(self, loan_rating_names):
        """Sets the loan_rating_names of this FilterOptions.


        :param loan_rating_names: The loan_rating_names of this FilterOptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NO_GUARANTEE", "BUYBACK", "PAYMENT_GUARANTEE", "BANK_GUARANTEE"]  # noqa: E501
        if not set(loan_rating_names).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `loan_rating_names` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(loan_rating_names) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._loan_rating_names = loan_rating_names

    @property
    def loan_status(self):
        """Gets the loan_status of this FilterOptions.  # noqa: E501


        :return: The loan_status of this FilterOptions.  # noqa: E501
        :rtype: int
        """
        return self._loan_status

    @loan_status.setter
    def loan_status(self, loan_status):
        """Sets the loan_status of this FilterOptions.


        :param loan_status: The loan_status of this FilterOptions.  # noqa: E501
        :type: int
        """

        self._loan_status = loan_status

    @property
    def loan_status_multi_select(self):
        """Gets the loan_status_multi_select of this FilterOptions.  # noqa: E501


        :return: The loan_status_multi_select of this FilterOptions.  # noqa: E501
        :rtype: list[int]
        """
        return self._loan_status_multi_select

    @loan_status_multi_select.setter
    def loan_status_multi_select(self, loan_status_multi_select):
        """Sets the loan_status_multi_select of this FilterOptions.


        :param loan_status_multi_select: The loan_status_multi_select of this FilterOptions.  # noqa: E501
        :type: list[int]
        """

        self._loan_status_multi_select = loan_status_multi_select

    @property
    def loan_type(self):
        """Gets the loan_type of this FilterOptions.  # noqa: E501


        :return: The loan_type of this FilterOptions.  # noqa: E501
        :rtype: int
        """
        return self._loan_type

    @loan_type.setter
    def loan_type(self, loan_type):
        """Sets the loan_type of this FilterOptions.


        :param loan_type: The loan_type of this FilterOptions.  # noqa: E501
        :type: int
        """

        self._loan_type = loan_type

    @property
    def loan_type_multi_select(self):
        """Gets the loan_type_multi_select of this FilterOptions.  # noqa: E501


        :return: The loan_type_multi_select of this FilterOptions.  # noqa: E501
        :rtype: list[int]
        """
        return self._loan_type_multi_select

    @loan_type_multi_select.setter
    def loan_type_multi_select(self, loan_type_multi_select):
        """Sets the loan_type_multi_select of this FilterOptions.


        :param loan_type_multi_select: The loan_type_multi_select of this FilterOptions.  # noqa: E501
        :type: list[int]
        """

        self._loan_type_multi_select = loan_type_multi_select

    @property
    def loan_type_names(self):
        """Gets the loan_type_names of this FilterOptions.  # noqa: E501


        :return: The loan_type_names of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._loan_type_names

    @loan_type_names.setter
    def loan_type_names(self, loan_type_names):
        """Sets the loan_type_names of this FilterOptions.


        :param loan_type_names: The loan_type_names of this FilterOptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["MORTGAGE", "CONSUMER", "INVOICE_FINANCING", "BUSINESS", "LINE_OF_CREDIT", "PAWNBROKING"]  # noqa: E501
        if not set(loan_type_names).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `loan_type_names` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(loan_type_names) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._loan_type_names = loan_type_names

    @property
    def max_interest(self):
        """Gets the max_interest of this FilterOptions.  # noqa: E501


        :return: The max_interest of this FilterOptions.  # noqa: E501
        :rtype: float
        """
        return self._max_interest

    @max_interest.setter
    def max_interest(self, max_interest):
        """Sets the max_interest of this FilterOptions.


        :param max_interest: The max_interest of this FilterOptions.  # noqa: E501
        :type: float
        """

        self._max_interest = max_interest

    @property
    def max_loan_term(self):
        """Gets the max_loan_term of this FilterOptions.  # noqa: E501


        :return: The max_loan_term of this FilterOptions.  # noqa: E501
        :rtype: int
        """
        return self._max_loan_term

    @max_loan_term.setter
    def max_loan_term(self, max_loan_term):
        """Sets the max_loan_term of this FilterOptions.


        :param max_loan_term: The max_loan_term of this FilterOptions.  # noqa: E501
        :type: int
        """

        self._max_loan_term = max_loan_term

    @property
    def max_ltv(self):
        """Gets the max_ltv of this FilterOptions.  # noqa: E501


        :return: The max_ltv of this FilterOptions.  # noqa: E501
        :rtype: float
        """
        return self._max_ltv

    @max_ltv.setter
    def max_ltv(self, max_ltv):
        """Sets the max_ltv of this FilterOptions.


        :param max_ltv: The max_ltv of this FilterOptions.  # noqa: E501
        :type: float
        """

        self._max_ltv = max_ltv

    @property
    def min_interest(self):
        """Gets the min_interest of this FilterOptions.  # noqa: E501


        :return: The min_interest of this FilterOptions.  # noqa: E501
        :rtype: float
        """
        return self._min_interest

    @min_interest.setter
    def min_interest(self, min_interest):
        """Sets the min_interest of this FilterOptions.


        :param min_interest: The min_interest of this FilterOptions.  # noqa: E501
        :type: float
        """

        self._min_interest = min_interest

    @property
    def min_loan_term(self):
        """Gets the min_loan_term of this FilterOptions.  # noqa: E501


        :return: The min_loan_term of this FilterOptions.  # noqa: E501
        :rtype: int
        """
        return self._min_loan_term

    @min_loan_term.setter
    def min_loan_term(self, min_loan_term):
        """Sets the min_loan_term of this FilterOptions.


        :param min_loan_term: The min_loan_term of this FilterOptions.  # noqa: E501
        :type: int
        """

        self._min_loan_term = min_loan_term

    @property
    def min_ltv(self):
        """Gets the min_ltv of this FilterOptions.  # noqa: E501


        :return: The min_ltv of this FilterOptions.  # noqa: E501
        :rtype: float
        """
        return self._min_ltv

    @min_ltv.setter
    def min_ltv(self, min_ltv):
        """Sets the min_ltv of this FilterOptions.


        :param min_ltv: The min_ltv of this FilterOptions.  # noqa: E501
        :type: float
        """

        self._min_ltv = min_ltv

    @property
    def my_investment(self):
        """Gets the my_investment of this FilterOptions.  # noqa: E501


        :return: The my_investment of this FilterOptions.  # noqa: E501
        :rtype: bool
        """
        return self._my_investment

    @my_investment.setter
    def my_investment(self, my_investment):
        """Sets the my_investment of this FilterOptions.


        :param my_investment: The my_investment of this FilterOptions.  # noqa: E501
        :type: bool
        """

        self._my_investment = my_investment

    @property
    def originator(self):
        """Gets the originator of this FilterOptions.  # noqa: E501


        :return: The originator of this FilterOptions.  # noqa: E501
        :rtype: list[int]
        """
        return self._originator

    @originator.setter
    def originator(self, originator):
        """Sets the originator of this FilterOptions.


        :param originator: The originator of this FilterOptions.  # noqa: E501
        :type: list[int]
        """

        self._originator = originator

    @property
    def pages(self):
        """Gets the pages of this FilterOptions.  # noqa: E501


        :return: The pages of this FilterOptions.  # noqa: E501
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this FilterOptions.


        :param pages: The pages of this FilterOptions.  # noqa: E501
        :type: int
        """

        self._pages = pages

    @property
    def schedule_types(self):
        """Gets the schedule_types of this FilterOptions.  # noqa: E501


        :return: The schedule_types of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._schedule_types

    @schedule_types.setter
    def schedule_types(self, schedule_types):
        """Sets the schedule_types of this FilterOptions.


        :param schedule_types: The schedule_types of this FilterOptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["INSTALLMENT", "PAYDAY", "CUSTOM"]  # noqa: E501
        if not set(schedule_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `schedule_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(schedule_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._schedule_types = schedule_types

    @property
    def sort(self):
        """Gets the sort of this FilterOptions.  # noqa: E501


        :return: The sort of this FilterOptions.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this FilterOptions.


        :param sort: The sort of this FilterOptions.  # noqa: E501
        :type: str
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
