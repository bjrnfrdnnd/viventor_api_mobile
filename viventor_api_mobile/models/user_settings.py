# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_area': 'str',
        'annum_income': 'float',
        'bank_iban': 'str',
        'city': 'str',
        'company_reg_no': 'str',
        'company_title': 'str',
        'country': 'str',
        'doc_passport': 'bool',
        'doc_tax_certificate': 'bool',
        'doc_utility_bill': 'bool',
        'documents': 'list[UserDocument]',
        'email': 'str',
        'gender': 'str',
        'id': 'int',
        'investor_id': 'int',
        'language': 'str',
        'name': 'str',
        'nid': 'str',
        'notification': 'int',
        'notification_funds_added': 'bool',
        'notification_list': 'list[str]',
        'num_document': 'int',
        'occupation': 'str',
        'passport': 'str',
        'phone': 'str',
        'referral_code': 'str',
        'street': 'str',
        'surname': 'str'
    }

    attribute_map = {
        'activity_area': 'activity_area',
        'annum_income': 'annum_income',
        'bank_iban': 'bank_iban',
        'city': 'city',
        'company_reg_no': 'company_reg_no',
        'company_title': 'company_title',
        'country': 'country',
        'doc_passport': 'doc_passport',
        'doc_tax_certificate': 'doc_tax_certificate',
        'doc_utility_bill': 'doc_utility_bill',
        'documents': 'documents',
        'email': 'email',
        'gender': 'gender',
        'id': 'id',
        'investor_id': 'investor_id',
        'language': 'language',
        'name': 'name',
        'nid': 'nid',
        'notification': 'notification',
        'notification_funds_added': 'notification_funds_added',
        'notification_list': 'notification_list',
        'num_document': 'num_document',
        'occupation': 'occupation',
        'passport': 'passport',
        'phone': 'phone',
        'referral_code': 'referral_code',
        'street': 'street',
        'surname': 'surname'
    }

    def __init__(self, activity_area=None, annum_income=None, bank_iban=None, city=None, company_reg_no=None, company_title=None, country=None, doc_passport=None, doc_tax_certificate=None, doc_utility_bill=None, documents=None, email=None, gender=None, id=None, investor_id=None, language=None, name=None, nid=None, notification=None, notification_funds_added=None, notification_list=None, num_document=None, occupation=None, passport=None, phone=None, referral_code=None, street=None, surname=None):  # noqa: E501
        """UserSettings - a model defined in Swagger"""  # noqa: E501

        self._activity_area = None
        self._annum_income = None
        self._bank_iban = None
        self._city = None
        self._company_reg_no = None
        self._company_title = None
        self._country = None
        self._doc_passport = None
        self._doc_tax_certificate = None
        self._doc_utility_bill = None
        self._documents = None
        self._email = None
        self._gender = None
        self._id = None
        self._investor_id = None
        self._language = None
        self._name = None
        self._nid = None
        self._notification = None
        self._notification_funds_added = None
        self._notification_list = None
        self._num_document = None
        self._occupation = None
        self._passport = None
        self._phone = None
        self._referral_code = None
        self._street = None
        self._surname = None
        self.discriminator = None

        if activity_area is not None:
            self.activity_area = activity_area
        if annum_income is not None:
            self.annum_income = annum_income
        if bank_iban is not None:
            self.bank_iban = bank_iban
        if city is not None:
            self.city = city
        if company_reg_no is not None:
            self.company_reg_no = company_reg_no
        if company_title is not None:
            self.company_title = company_title
        if country is not None:
            self.country = country
        if doc_passport is not None:
            self.doc_passport = doc_passport
        if doc_tax_certificate is not None:
            self.doc_tax_certificate = doc_tax_certificate
        if doc_utility_bill is not None:
            self.doc_utility_bill = doc_utility_bill
        if documents is not None:
            self.documents = documents
        if email is not None:
            self.email = email
        if gender is not None:
            self.gender = gender
        if id is not None:
            self.id = id
        if investor_id is not None:
            self.investor_id = investor_id
        if language is not None:
            self.language = language
        if name is not None:
            self.name = name
        if nid is not None:
            self.nid = nid
        if notification is not None:
            self.notification = notification
        if notification_funds_added is not None:
            self.notification_funds_added = notification_funds_added
        if notification_list is not None:
            self.notification_list = notification_list
        if num_document is not None:
            self.num_document = num_document
        if occupation is not None:
            self.occupation = occupation
        if passport is not None:
            self.passport = passport
        if phone is not None:
            self.phone = phone
        if referral_code is not None:
            self.referral_code = referral_code
        if street is not None:
            self.street = street
        if surname is not None:
            self.surname = surname

    @property
    def activity_area(self):
        """Gets the activity_area of this UserSettings.  # noqa: E501


        :return: The activity_area of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._activity_area

    @activity_area.setter
    def activity_area(self, activity_area):
        """Sets the activity_area of this UserSettings.


        :param activity_area: The activity_area of this UserSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["STUDENT", "PENSIONER", "UNEMPLOYED", "FIXED_TERM_CONTRACT", "TERMLESS_CONTRACT", "SELF_EMPLOYED", "OTHER"]  # noqa: E501
        if activity_area not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_area` ({0}), must be one of {1}"  # noqa: E501
                .format(activity_area, allowed_values)
            )

        self._activity_area = activity_area

    @property
    def annum_income(self):
        """Gets the annum_income of this UserSettings.  # noqa: E501


        :return: The annum_income of this UserSettings.  # noqa: E501
        :rtype: float
        """
        return self._annum_income

    @annum_income.setter
    def annum_income(self, annum_income):
        """Sets the annum_income of this UserSettings.


        :param annum_income: The annum_income of this UserSettings.  # noqa: E501
        :type: float
        """

        self._annum_income = annum_income

    @property
    def bank_iban(self):
        """Gets the bank_iban of this UserSettings.  # noqa: E501


        :return: The bank_iban of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._bank_iban

    @bank_iban.setter
    def bank_iban(self, bank_iban):
        """Sets the bank_iban of this UserSettings.


        :param bank_iban: The bank_iban of this UserSettings.  # noqa: E501
        :type: str
        """

        self._bank_iban = bank_iban

    @property
    def city(self):
        """Gets the city of this UserSettings.  # noqa: E501


        :return: The city of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UserSettings.


        :param city: The city of this UserSettings.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company_reg_no(self):
        """Gets the company_reg_no of this UserSettings.  # noqa: E501


        :return: The company_reg_no of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._company_reg_no

    @company_reg_no.setter
    def company_reg_no(self, company_reg_no):
        """Sets the company_reg_no of this UserSettings.


        :param company_reg_no: The company_reg_no of this UserSettings.  # noqa: E501
        :type: str
        """

        self._company_reg_no = company_reg_no

    @property
    def company_title(self):
        """Gets the company_title of this UserSettings.  # noqa: E501


        :return: The company_title of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._company_title

    @company_title.setter
    def company_title(self, company_title):
        """Sets the company_title of this UserSettings.


        :param company_title: The company_title of this UserSettings.  # noqa: E501
        :type: str
        """

        self._company_title = company_title

    @property
    def country(self):
        """Gets the country of this UserSettings.  # noqa: E501


        :return: The country of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UserSettings.


        :param country: The country of this UserSettings.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def doc_passport(self):
        """Gets the doc_passport of this UserSettings.  # noqa: E501


        :return: The doc_passport of this UserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._doc_passport

    @doc_passport.setter
    def doc_passport(self, doc_passport):
        """Sets the doc_passport of this UserSettings.


        :param doc_passport: The doc_passport of this UserSettings.  # noqa: E501
        :type: bool
        """

        self._doc_passport = doc_passport

    @property
    def doc_tax_certificate(self):
        """Gets the doc_tax_certificate of this UserSettings.  # noqa: E501


        :return: The doc_tax_certificate of this UserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._doc_tax_certificate

    @doc_tax_certificate.setter
    def doc_tax_certificate(self, doc_tax_certificate):
        """Sets the doc_tax_certificate of this UserSettings.


        :param doc_tax_certificate: The doc_tax_certificate of this UserSettings.  # noqa: E501
        :type: bool
        """

        self._doc_tax_certificate = doc_tax_certificate

    @property
    def doc_utility_bill(self):
        """Gets the doc_utility_bill of this UserSettings.  # noqa: E501


        :return: The doc_utility_bill of this UserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._doc_utility_bill

    @doc_utility_bill.setter
    def doc_utility_bill(self, doc_utility_bill):
        """Sets the doc_utility_bill of this UserSettings.


        :param doc_utility_bill: The doc_utility_bill of this UserSettings.  # noqa: E501
        :type: bool
        """

        self._doc_utility_bill = doc_utility_bill

    @property
    def documents(self):
        """Gets the documents of this UserSettings.  # noqa: E501


        :return: The documents of this UserSettings.  # noqa: E501
        :rtype: list[UserDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this UserSettings.


        :param documents: The documents of this UserSettings.  # noqa: E501
        :type: list[UserDocument]
        """

        self._documents = documents

    @property
    def email(self):
        """Gets the email of this UserSettings.  # noqa: E501


        :return: The email of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserSettings.


        :param email: The email of this UserSettings.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def gender(self):
        """Gets the gender of this UserSettings.  # noqa: E501


        :return: The gender of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UserSettings.


        :param gender: The gender of this UserSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["MALE", "FEMALE"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this UserSettings.  # noqa: E501


        :return: The id of this UserSettings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserSettings.


        :param id: The id of this UserSettings.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def investor_id(self):
        """Gets the investor_id of this UserSettings.  # noqa: E501


        :return: The investor_id of this UserSettings.  # noqa: E501
        :rtype: int
        """
        return self._investor_id

    @investor_id.setter
    def investor_id(self, investor_id):
        """Sets the investor_id of this UserSettings.


        :param investor_id: The investor_id of this UserSettings.  # noqa: E501
        :type: int
        """

        self._investor_id = investor_id

    @property
    def language(self):
        """Gets the language of this UserSettings.  # noqa: E501


        :return: The language of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UserSettings.


        :param language: The language of this UserSettings.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this UserSettings.  # noqa: E501


        :return: The name of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserSettings.


        :param name: The name of this UserSettings.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nid(self):
        """Gets the nid of this UserSettings.  # noqa: E501


        :return: The nid of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._nid

    @nid.setter
    def nid(self, nid):
        """Sets the nid of this UserSettings.


        :param nid: The nid of this UserSettings.  # noqa: E501
        :type: str
        """

        self._nid = nid

    @property
    def notification(self):
        """Gets the notification of this UserSettings.  # noqa: E501


        :return: The notification of this UserSettings.  # noqa: E501
        :rtype: int
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this UserSettings.


        :param notification: The notification of this UserSettings.  # noqa: E501
        :type: int
        """

        self._notification = notification

    @property
    def notification_funds_added(self):
        """Gets the notification_funds_added of this UserSettings.  # noqa: E501


        :return: The notification_funds_added of this UserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._notification_funds_added

    @notification_funds_added.setter
    def notification_funds_added(self, notification_funds_added):
        """Sets the notification_funds_added of this UserSettings.


        :param notification_funds_added: The notification_funds_added of this UserSettings.  # noqa: E501
        :type: bool
        """

        self._notification_funds_added = notification_funds_added

    @property
    def notification_list(self):
        """Gets the notification_list of this UserSettings.  # noqa: E501


        :return: The notification_list of this UserSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._notification_list

    @notification_list.setter
    def notification_list(self, notification_list):
        """Sets the notification_list of this UserSettings.


        :param notification_list: The notification_list of this UserSettings.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["DAILY_SUMMARY", "FUNDS_ADDED", "WEEKLY_SUMMARY", "MONTHLY_SUMMARY"]  # noqa: E501
        if not set(notification_list).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `notification_list` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(notification_list) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._notification_list = notification_list

    @property
    def num_document(self):
        """Gets the num_document of this UserSettings.  # noqa: E501


        :return: The num_document of this UserSettings.  # noqa: E501
        :rtype: int
        """
        return self._num_document

    @num_document.setter
    def num_document(self, num_document):
        """Sets the num_document of this UserSettings.


        :param num_document: The num_document of this UserSettings.  # noqa: E501
        :type: int
        """

        self._num_document = num_document

    @property
    def occupation(self):
        """Gets the occupation of this UserSettings.  # noqa: E501


        :return: The occupation of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this UserSettings.


        :param occupation: The occupation of this UserSettings.  # noqa: E501
        :type: str
        """

        self._occupation = occupation

    @property
    def passport(self):
        """Gets the passport of this UserSettings.  # noqa: E501


        :return: The passport of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._passport

    @passport.setter
    def passport(self, passport):
        """Sets the passport of this UserSettings.


        :param passport: The passport of this UserSettings.  # noqa: E501
        :type: str
        """

        self._passport = passport

    @property
    def phone(self):
        """Gets the phone of this UserSettings.  # noqa: E501


        :return: The phone of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserSettings.


        :param phone: The phone of this UserSettings.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def referral_code(self):
        """Gets the referral_code of this UserSettings.  # noqa: E501


        :return: The referral_code of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code):
        """Sets the referral_code of this UserSettings.


        :param referral_code: The referral_code of this UserSettings.  # noqa: E501
        :type: str
        """

        self._referral_code = referral_code

    @property
    def street(self):
        """Gets the street of this UserSettings.  # noqa: E501


        :return: The street of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this UserSettings.


        :param street: The street of this UserSettings.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def surname(self):
        """Gets the surname of this UserSettings.  # noqa: E501


        :return: The surname of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this UserSettings.


        :param surname: The surname of this UserSettings.  # noqa: E501
        :type: str
        """

        self._surname = surname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
