# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from viventor_api_mobile.api_client import ApiClient


class InvestmentControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_investment_using_post(self, note_id, **kwargs):  # noqa: E501
        """cancelInvestment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_investment_using_post(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: SellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_investment_using_post_with_http_info(note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_investment_using_post_with_http_info(note_id, **kwargs)  # noqa: E501
            return data

    def cancel_investment_using_post_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """cancelInvestment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_investment_using_post_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: SellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_investment_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `cancel_investment_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/myInvestments/cancel/{noteId}.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SellResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_assignment_agreement_using_get(self, **kwargs):  # noqa: E501
        """downloadAssignmentAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_assignment_agreement_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_assignment_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.download_assignment_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def download_assignment_agreement_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """downloadAssignmentAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_assignment_agreement_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_assignment_agreement_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/assignment-agreements.pdf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_contract_file_using_get(self, note_id, **kwargs):  # noqa: E501
        """downloadContractFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_contract_file_using_get(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_contract_file_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_contract_file_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
            return data

    def download_contract_file_using_get_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """downloadContractFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_contract_file_using_get_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_contract_file_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `download_contract_file_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/myInvestments/contract/{noteId}.pdf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_data_processing_agreement_using_get(self, **kwargs):  # noqa: E501
        """downloadDataProcessingAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_data_processing_agreement_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_data_processing_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.download_data_processing_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def download_data_processing_agreement_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """downloadDataProcessingAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_data_processing_agreement_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_data_processing_agreement_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/data-processing.pdf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_loan_attachment_using_get2(self, id, **kwargs):  # noqa: E501
        """downloadLoanAttachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_loan_attachment_using_get2(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_loan_attachment_using_get2_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_loan_attachment_using_get2_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def download_loan_attachment_using_get2_with_http_info(self, id, **kwargs):  # noqa: E501
        """downloadLoanAttachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_loan_attachment_using_get2_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_loan_attachment_using_get2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `download_loan_attachment_using_get2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/attachment/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_primary_market_contract_preview_file_using_get(self, loan_id, **kwargs):  # noqa: E501
        """downloadPrimaryMarketContractPreviewFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_primary_market_contract_preview_file_using_get(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_primary_market_contract_preview_file_using_get_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_primary_market_contract_preview_file_using_get_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def download_primary_market_contract_preview_file_using_get_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """downloadPrimaryMarketContractPreviewFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_primary_market_contract_preview_file_using_get_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_primary_market_contract_preview_file_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `download_primary_market_contract_preview_file_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/primary/contract/{loanId}.pdf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_privacy_policy_agreement_using_get(self, **kwargs):  # noqa: E501
        """downloadPrivacyPolicyAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_privacy_policy_agreement_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_privacy_policy_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.download_privacy_policy_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def download_privacy_policy_agreement_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """downloadPrivacyPolicyAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_privacy_policy_agreement_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_privacy_policy_agreement_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/privacy-policy.pdf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_secondary_market_contract_preview_file_using_get(self, note_id, **kwargs):  # noqa: E501
        """downloadSecondaryMarketContractPreviewFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_secondary_market_contract_preview_file_using_get(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_secondary_market_contract_preview_file_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_secondary_market_contract_preview_file_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
            return data

    def download_secondary_market_contract_preview_file_using_get_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """downloadSecondaryMarketContractPreviewFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_secondary_market_contract_preview_file_using_get_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_secondary_market_contract_preview_file_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `download_secondary_market_contract_preview_file_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/secondary/contract/{noteId}.pdf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_user_agreement_using_get(self, **kwargs):  # noqa: E501
        """downloadUserAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_user_agreement_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_user_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.download_user_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def download_user_agreement_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """downloadUserAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_user_agreement_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_user_agreement_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/user-agreements.pdf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_and_download_loan_book_using_post(self, **kwargs):  # noqa: E501
        """exportAndDownloadLoanBook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_and_download_loan_book_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_and_download_loan_book_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.export_and_download_loan_book_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def export_and_download_loan_book_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """exportAndDownloadLoanBook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_and_download_loan_book_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_and_download_loan_book_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/loan-book.xlsx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_and_download_report_using_post(self, **kwargs):  # noqa: E501
        """exportAndDownloadReport  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_and_download_report_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_and_download_report_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.export_and_download_report_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def export_and_download_report_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """exportAndDownloadReport  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_and_download_report_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_and_download_report_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/myInvestment/export.xlsx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_add_funds_credentials_using_get(self, **kwargs):  # noqa: E501
        """getAddFundsCredentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_add_funds_credentials_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AddFundsCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_add_funds_credentials_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_add_funds_credentials_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_add_funds_credentials_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getAddFundsCredentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_add_funds_credentials_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AddFundsCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_add_funds_credentials_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/invest-fund/add.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddFundsCredentials',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_view_loan_primary_market_using_get(self, loan_id, **kwargs):  # noqa: E501
        """getViewLoanPrimaryMarket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_loan_primary_market_using_get(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: LoanViewPrimary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_view_loan_primary_market_using_get_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_view_loan_primary_market_using_get_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def get_view_loan_primary_market_using_get_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """getViewLoanPrimaryMarket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_loan_primary_market_using_get_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: LoanViewPrimary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_view_loan_primary_market_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `get_view_loan_primary_market_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/primary/{loanId}.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanViewPrimary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_view_loan_secondary_market_using_get(self, note_id, **kwargs):  # noqa: E501
        """getViewLoanSecondaryMarket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_loan_secondary_market_using_get(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: LoanViewSecondary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_view_loan_secondary_market_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_view_loan_secondary_market_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
            return data

    def get_view_loan_secondary_market_using_get_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """getViewLoanSecondaryMarket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_loan_secondary_market_using_get_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: LoanViewSecondary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_view_loan_secondary_market_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `get_view_loan_secondary_market_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/secondary/{noteId}.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanViewSecondary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_view_my_investment_using_get(self, note_id, **kwargs):  # noqa: E501
        """getViewMyInvestment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_my_investment_using_get(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: MyInvestmentView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_view_my_investment_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_view_my_investment_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
            return data

    def get_view_my_investment_using_get_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """getViewMyInvestment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_my_investment_using_get_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: MyInvestmentView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_view_my_investment_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `get_view_my_investment_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/myInvestment/{noteId}.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MyInvestmentView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invest_primary_market_with_request_body_using_post(self, loan_id, request_body_with_amount, **kwargs):  # noqa: E501
        """investPrimaryMarketWithRequestBody  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invest_primary_market_with_request_body_using_post(loan_id, request_body_with_amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param RequestBodyWithAmount request_body_with_amount: requestBodyWithAmount (required)
        :return: InvestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invest_primary_market_with_request_body_using_post_with_http_info(loan_id, request_body_with_amount, **kwargs)  # noqa: E501
        else:
            (data) = self.invest_primary_market_with_request_body_using_post_with_http_info(loan_id, request_body_with_amount, **kwargs)  # noqa: E501
            return data

    def invest_primary_market_with_request_body_using_post_with_http_info(self, loan_id, request_body_with_amount, **kwargs):  # noqa: E501
        """investPrimaryMarketWithRequestBody  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invest_primary_market_with_request_body_using_post_with_http_info(loan_id, request_body_with_amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :param RequestBodyWithAmount request_body_with_amount: requestBodyWithAmount (required)
        :return: InvestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id', 'request_body_with_amount']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invest_primary_market_with_request_body_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `invest_primary_market_with_request_body_using_post`")  # noqa: E501
        # verify the required parameter 'request_body_with_amount' is set
        if ('request_body_with_amount' not in params or
                params['request_body_with_amount'] is None):
            raise ValueError("Missing the required parameter `request_body_with_amount` when calling `invest_primary_market_with_request_body_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body_with_amount' in params:
            body_params = params['request_body_with_amount']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/primary/invest/{loanId}.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invest_secondary_market_using_get(self, note_id, **kwargs):  # noqa: E501
        """investSecondaryMarket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invest_secondary_market_using_get(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :param bool extension_opt_in: extensionOptIn
        :return: InvestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invest_secondary_market_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invest_secondary_market_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
            return data

    def invest_secondary_market_using_get_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """investSecondaryMarket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invest_secondary_market_using_get_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :param bool extension_opt_in: extensionOptIn
        :return: InvestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id', 'extension_opt_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invest_secondary_market_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `invest_secondary_market_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []
        if 'extension_opt_in' in params:
            query_params.append(('extensionOptIn', params['extension_opt_in']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/secondary/invest/{noteId}.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_loan_attachments_using_get1(self, loan_id, **kwargs):  # noqa: E501
        """listLoanAttachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_loan_attachments_using_get1(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: list[LoanAttachment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_loan_attachments_using_get1_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_loan_attachments_using_get1_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def list_loan_attachments_using_get1_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """listLoanAttachments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_loan_attachments_using_get1_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: list[LoanAttachment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_loan_attachments_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `list_loan_attachments_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/attachments/{loanId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LoanAttachment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def my_investments_using_get(self, **kwargs):  # noqa: E501
        """myInvestments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.my_investments_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.my_investments_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.my_investments_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def my_investments_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """myInvestments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.my_investments_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method my_investments_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/myInvestments.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def my_investments_using_post(self, filter, **kwargs):  # noqa: E501
        """myInvestments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.my_investments_using_post(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilterOptions filter: filter (required)
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.my_investments_using_post_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.my_investments_using_post_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def my_investments_using_post_with_http_info(self, filter, **kwargs):  # noqa: E501
        """myInvestments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.my_investments_using_post_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilterOptions filter: filter (required)
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method my_investments_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `my_investments_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/myInvestments.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def primary_public_info_using_get(self, **kwargs):  # noqa: E501
        """primaryPublicInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.primary_public_info_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoansPrimaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.primary_public_info_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.primary_public_info_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def primary_public_info_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """primaryPublicInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.primary_public_info_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoansPrimaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method primary_public_info_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/primary-public.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoansPrimaryModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def primary_public_info_using_post(self, filter_options, **kwargs):  # noqa: E501
        """primaryPublicInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.primary_public_info_using_post(filter_options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilterOptions filter_options: filterOptions (required)
        :return: LoansPrimaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.primary_public_info_using_post_with_http_info(filter_options, **kwargs)  # noqa: E501
        else:
            (data) = self.primary_public_info_using_post_with_http_info(filter_options, **kwargs)  # noqa: E501
            return data

    def primary_public_info_using_post_with_http_info(self, filter_options, **kwargs):  # noqa: E501
        """primaryPublicInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.primary_public_info_using_post_with_http_info(filter_options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilterOptions filter_options: filterOptions (required)
        :return: LoansPrimaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method primary_public_info_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_options' is set
        if ('filter_options' not in params or
                params['filter_options'] is None):
            raise ValueError("Missing the required parameter `filter_options` when calling `primary_public_info_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter_options' in params:
            body_params = params['filter_options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/primary-public.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoansPrimaryModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def primary_using_get(self, **kwargs):  # noqa: E501
        """primary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.primary_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.primary_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.primary_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def primary_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """primary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.primary_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method primary_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/primary.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def primary_using_post(self, filter, **kwargs):  # noqa: E501
        """primary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.primary_using_post(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilterOptions filter: filter (required)
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.primary_using_post_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.primary_using_post_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def primary_using_post_with_http_info(self, filter, **kwargs):  # noqa: E501
        """primary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.primary_using_post_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilterOptions filter: filter (required)
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method primary_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `primary_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/primary.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def render_assignment_agreement_using_get(self, **kwargs):  # noqa: E501
        """renderAssignmentAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_assignment_agreement_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.render_assignment_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.render_assignment_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def render_assignment_agreement_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """renderAssignmentAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_assignment_agreement_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_assignment_agreement_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/assignment-agreements.html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def render_contract_html_using_get(self, note_id, **kwargs):  # noqa: E501
        """renderContractHtml  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_contract_html_using_get(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.render_contract_html_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.render_contract_html_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
            return data

    def render_contract_html_using_get_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """renderContractHtml  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_contract_html_using_get_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_contract_html_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `render_contract_html_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/myInvestments/contract/{noteId}.html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def render_primary_market_contract_preview_html_using_get(self, loan_id, **kwargs):  # noqa: E501
        """renderPrimaryMarketContractPreviewHtml  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_primary_market_contract_preview_html_using_get(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.render_primary_market_contract_preview_html_using_get_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.render_primary_market_contract_preview_html_using_get_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def render_primary_market_contract_preview_html_using_get_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """renderPrimaryMarketContractPreviewHtml  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_primary_market_contract_preview_html_using_get_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_id: loanId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_primary_market_contract_preview_html_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in params or
                params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `render_primary_market_contract_preview_html_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in params:
            path_params['loanId'] = params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/primary/contract/{loanId}.html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def render_secondary_market_contract_preview_html_using_get(self, note_id, **kwargs):  # noqa: E501
        """renderSecondaryMarketContractPreviewHtml  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_secondary_market_contract_preview_html_using_get(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.render_secondary_market_contract_preview_html_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.render_secondary_market_contract_preview_html_using_get_with_http_info(note_id, **kwargs)  # noqa: E501
            return data

    def render_secondary_market_contract_preview_html_using_get_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """renderSecondaryMarketContractPreviewHtml  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_secondary_market_contract_preview_html_using_get_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_secondary_market_contract_preview_html_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `render_secondary_market_contract_preview_html_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/secondary/contract/{noteId}.html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def render_user_agreement_using_get(self, **kwargs):  # noqa: E501
        """renderUserAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_user_agreement_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.render_user_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.render_user_agreement_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def render_user_agreement_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """renderUserAgreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_user_agreement_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_user_agreement_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/user-agreements.html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secondary_public_info_using_get(self, **kwargs):  # noqa: E501
        """secondaryPublicInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secondary_public_info_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoansSecondaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secondary_public_info_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.secondary_public_info_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def secondary_public_info_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """secondaryPublicInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secondary_public_info_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LoansSecondaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secondary_public_info_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/secondary-public.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoansSecondaryModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secondary_using_get(self, **kwargs):  # noqa: E501
        """secondary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secondary_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secondary_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.secondary_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def secondary_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """secondary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secondary_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secondary_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/secondary.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def secondary_using_post(self, filter, **kwargs):  # noqa: E501
        """secondary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secondary_using_post(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilterOptions filter: filter (required)
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.secondary_using_post_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.secondary_using_post_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def secondary_using_post_with_http_info(self, filter, **kwargs):  # noqa: E501
        """secondary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.secondary_using_post_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilterOptions filter: filter (required)
        :return: MarketInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secondary_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `secondary_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/secondary.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sell_investment_using_post(self, note_id, sell_interest, **kwargs):  # noqa: E501
        """sellInvestment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sell_investment_using_post(note_id, sell_interest, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :param int sell_interest: sell_interest (required)
        :return: SellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sell_investment_using_post_with_http_info(note_id, sell_interest, **kwargs)  # noqa: E501
        else:
            (data) = self.sell_investment_using_post_with_http_info(note_id, sell_interest, **kwargs)  # noqa: E501
            return data

    def sell_investment_using_post_with_http_info(self, note_id, sell_interest, **kwargs):  # noqa: E501
        """sellInvestment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sell_investment_using_post_with_http_info(note_id, sell_interest, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: noteId (required)
        :param int sell_interest: sell_interest (required)
        :return: SellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id', 'sell_interest']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sell_investment_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `sell_investment_using_post`")  # noqa: E501
        # verify the required parameter 'sell_interest' is set
        if ('sell_interest' not in params or
                params['sell_interest'] is None):
            raise ValueError("Missing the required parameter `sell_interest` when calling `sell_investment_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []
        if 'sell_interest' in params:
            query_params.append(('sell_interest', params['sell_interest']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/loan-investor/myInvestments/sell/{noteId}.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SellResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def withdraw_funds_with_request_body_using_post(self, withdrawal_model, **kwargs):  # noqa: E501
        """withdrawFundsWithRequestBody  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdraw_funds_with_request_body_using_post(withdrawal_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WithdrawalModel withdrawal_model: withdrawalModel (required)
        :return: CommonOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.withdraw_funds_with_request_body_using_post_with_http_info(withdrawal_model, **kwargs)  # noqa: E501
        else:
            (data) = self.withdraw_funds_with_request_body_using_post_with_http_info(withdrawal_model, **kwargs)  # noqa: E501
            return data

    def withdraw_funds_with_request_body_using_post_with_http_info(self, withdrawal_model, **kwargs):  # noqa: E501
        """withdrawFundsWithRequestBody  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdraw_funds_with_request_body_using_post_with_http_info(withdrawal_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WithdrawalModel withdrawal_model: withdrawalModel (required)
        :return: CommonOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['withdrawal_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method withdraw_funds_with_request_body_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'withdrawal_model' is set
        if ('withdrawal_model' not in params or
                params['withdrawal_model'] is None):
            raise ValueError("Missing the required parameter `withdrawal_model` when calling `withdraw_funds_with_request_body_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'withdrawal_model' in params:
            body_params = params['withdrawal_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/invest-fund/withdraw.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommonOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def withdrawal_using_get(self, **kwargs):  # noqa: E501
        """withdrawal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdrawal_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WithdrawalThreshold
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.withdrawal_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.withdrawal_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def withdrawal_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """withdrawal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdrawal_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WithdrawalThreshold
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method withdrawal_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/app/v1/invest-fund/withdraw.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WithdrawalThreshold',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
