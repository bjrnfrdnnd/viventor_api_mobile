# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LoanAttachment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deleted': 'bool',
        'file_id': 'int',
        'id': 'int',
        'loan_id': 'int',
        'original_file_name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'deleted': 'deleted',
        'file_id': 'fileId',
        'id': 'id',
        'loan_id': 'loanId',
        'original_file_name': 'originalFileName',
        'type': 'type'
    }

    def __init__(self, deleted=None, file_id=None, id=None, loan_id=None, original_file_name=None, type=None):  # noqa: E501
        """LoanAttachment - a model defined in Swagger"""  # noqa: E501

        self._deleted = None
        self._file_id = None
        self._id = None
        self._loan_id = None
        self._original_file_name = None
        self._type = None
        self.discriminator = None

        if deleted is not None:
            self.deleted = deleted
        if file_id is not None:
            self.file_id = file_id
        if id is not None:
            self.id = id
        if loan_id is not None:
            self.loan_id = loan_id
        if original_file_name is not None:
            self.original_file_name = original_file_name
        if type is not None:
            self.type = type

    @property
    def deleted(self):
        """Gets the deleted of this LoanAttachment.  # noqa: E501


        :return: The deleted of this LoanAttachment.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this LoanAttachment.


        :param deleted: The deleted of this LoanAttachment.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def file_id(self):
        """Gets the file_id of this LoanAttachment.  # noqa: E501


        :return: The file_id of this LoanAttachment.  # noqa: E501
        :rtype: int
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this LoanAttachment.


        :param file_id: The file_id of this LoanAttachment.  # noqa: E501
        :type: int
        """

        self._file_id = file_id

    @property
    def id(self):
        """Gets the id of this LoanAttachment.  # noqa: E501


        :return: The id of this LoanAttachment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoanAttachment.


        :param id: The id of this LoanAttachment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def loan_id(self):
        """Gets the loan_id of this LoanAttachment.  # noqa: E501


        :return: The loan_id of this LoanAttachment.  # noqa: E501
        :rtype: int
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """Sets the loan_id of this LoanAttachment.


        :param loan_id: The loan_id of this LoanAttachment.  # noqa: E501
        :type: int
        """

        self._loan_id = loan_id

    @property
    def original_file_name(self):
        """Gets the original_file_name of this LoanAttachment.  # noqa: E501


        :return: The original_file_name of this LoanAttachment.  # noqa: E501
        :rtype: str
        """
        return self._original_file_name

    @original_file_name.setter
    def original_file_name(self, original_file_name):
        """Sets the original_file_name of this LoanAttachment.


        :param original_file_name: The original_file_name of this LoanAttachment.  # noqa: E501
        :type: str
        """

        self._original_file_name = original_file_name

    @property
    def type(self):
        """Gets the type of this LoanAttachment.  # noqa: E501


        :return: The type of this LoanAttachment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LoanAttachment.


        :param type: The type of this LoanAttachment.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOAN_DETAILS", "MAIN_IMAGE", "GALLERY_IMAGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanAttachment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanAttachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
