# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Investment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attachments': 'list[LoanAttachment]',
        'bank_guarantee': 'bool',
        'buyback': 'bool',
        'company': 'str',
        'country_code': 'str',
        'currency': 'str',
        'date_end': 'date',
        'doc_id': 'int',
        'extended': 'bool',
        'fk_loan_issued_id': 'int',
        'fk_loan_request': 'int',
        'funded_amount': 'float',
        'guarantee': 'bool',
        'id': 'int',
        'ilsa_bonus': 'int',
        'ilsa_status': 'int',
        'initial_amount': 'float',
        'initial_capital': 'float',
        'interest': 'float',
        'investment_enabled': 'bool',
        'loan_rating': 'str',
        'loan_type': 'int',
        'loan_type_name': 'str',
        'loan_payment_enabled': 'bool',
        'loan_share_id': 'int',
        'ltv': 'float',
        'ltv2': 'float',
        'payment_guarantee': 'bool',
        'price': 'float',
        'purchase_date': 'date',
        'remaing_capital_after_paid_quote': 'float',
        'remaining_capital_for_investment': 'float',
        'remaining_loan_term': 'int',
        'request_date': 'date',
        'request_term': 'int',
        't_presta_key': 'int'
    }

    attribute_map = {
        'attachments': 'attachments',
        'bank_guarantee': 'bank_guarantee',
        'buyback': 'buyback',
        'company': 'company',
        'country_code': 'country_code',
        'currency': 'currency',
        'date_end': 'date_end',
        'doc_id': 'doc_id',
        'extended': 'extended',
        'fk_loan_issued_id': 'fk_loan_issued_id',
        'fk_loan_request': 'fk_loan_request',
        'funded_amount': 'funded_amount',
        'guarantee': 'guarantee',
        'id': 'id',
        'ilsa_bonus': 'ilsaBonus',
        'ilsa_status': 'ilsaStatus',
        'initial_amount': 'initialAmount',
        'initial_capital': 'initial_capital',
        'interest': 'interest',
        'investment_enabled': 'investment_enabled',
        'loan_rating': 'loanRating',
        'loan_type': 'loanType',
        'loan_type_name': 'loanTypeName',
        'loan_payment_enabled': 'loan_payment_enabled',
        'loan_share_id': 'loan_share_id',
        'ltv': 'ltv',
        'ltv2': 'ltv2',
        'payment_guarantee': 'payment_guarantee',
        'price': 'price',
        'purchase_date': 'purchase_date',
        'remaing_capital_after_paid_quote': 'remaing_capital_afterPaidQuote',
        'remaining_capital_for_investment': 'remaining_capital_forInvestment',
        'remaining_loan_term': 'remaining_loan_term',
        'request_date': 'request_date',
        'request_term': 'request_term',
        't_presta_key': 't_presta_key'
    }

    def __init__(self, attachments=None, bank_guarantee=None, buyback=None, company=None, country_code=None, currency=None, date_end=None, doc_id=None, extended=None, fk_loan_issued_id=None, fk_loan_request=None, funded_amount=None, guarantee=None, id=None, ilsa_bonus=None, ilsa_status=None, initial_amount=None, initial_capital=None, interest=None, investment_enabled=None, loan_rating=None, loan_type=None, loan_type_name=None, loan_payment_enabled=None, loan_share_id=None, ltv=None, ltv2=None, payment_guarantee=None, price=None, purchase_date=None, remaing_capital_after_paid_quote=None, remaining_capital_for_investment=None, remaining_loan_term=None, request_date=None, request_term=None, t_presta_key=None):  # noqa: E501
        """Investment - a model defined in Swagger"""  # noqa: E501

        self._attachments = None
        self._bank_guarantee = None
        self._buyback = None
        self._company = None
        self._country_code = None
        self._currency = None
        self._date_end = None
        self._doc_id = None
        self._extended = None
        self._fk_loan_issued_id = None
        self._fk_loan_request = None
        self._funded_amount = None
        self._guarantee = None
        self._id = None
        self._ilsa_bonus = None
        self._ilsa_status = None
        self._initial_amount = None
        self._initial_capital = None
        self._interest = None
        self._investment_enabled = None
        self._loan_rating = None
        self._loan_type = None
        self._loan_type_name = None
        self._loan_payment_enabled = None
        self._loan_share_id = None
        self._ltv = None
        self._ltv2 = None
        self._payment_guarantee = None
        self._price = None
        self._purchase_date = None
        self._remaing_capital_after_paid_quote = None
        self._remaining_capital_for_investment = None
        self._remaining_loan_term = None
        self._request_date = None
        self._request_term = None
        self._t_presta_key = None
        self.discriminator = None

        if attachments is not None:
            self.attachments = attachments
        if bank_guarantee is not None:
            self.bank_guarantee = bank_guarantee
        if buyback is not None:
            self.buyback = buyback
        if company is not None:
            self.company = company
        if country_code is not None:
            self.country_code = country_code
        if currency is not None:
            self.currency = currency
        if date_end is not None:
            self.date_end = date_end
        if doc_id is not None:
            self.doc_id = doc_id
        if extended is not None:
            self.extended = extended
        if fk_loan_issued_id is not None:
            self.fk_loan_issued_id = fk_loan_issued_id
        if fk_loan_request is not None:
            self.fk_loan_request = fk_loan_request
        if funded_amount is not None:
            self.funded_amount = funded_amount
        if guarantee is not None:
            self.guarantee = guarantee
        if id is not None:
            self.id = id
        if ilsa_bonus is not None:
            self.ilsa_bonus = ilsa_bonus
        if ilsa_status is not None:
            self.ilsa_status = ilsa_status
        if initial_amount is not None:
            self.initial_amount = initial_amount
        if initial_capital is not None:
            self.initial_capital = initial_capital
        if interest is not None:
            self.interest = interest
        if investment_enabled is not None:
            self.investment_enabled = investment_enabled
        if loan_rating is not None:
            self.loan_rating = loan_rating
        if loan_type is not None:
            self.loan_type = loan_type
        if loan_type_name is not None:
            self.loan_type_name = loan_type_name
        if loan_payment_enabled is not None:
            self.loan_payment_enabled = loan_payment_enabled
        if loan_share_id is not None:
            self.loan_share_id = loan_share_id
        if ltv is not None:
            self.ltv = ltv
        if ltv2 is not None:
            self.ltv2 = ltv2
        if payment_guarantee is not None:
            self.payment_guarantee = payment_guarantee
        if price is not None:
            self.price = price
        if purchase_date is not None:
            self.purchase_date = purchase_date
        if remaing_capital_after_paid_quote is not None:
            self.remaing_capital_after_paid_quote = remaing_capital_after_paid_quote
        if remaining_capital_for_investment is not None:
            self.remaining_capital_for_investment = remaining_capital_for_investment
        if remaining_loan_term is not None:
            self.remaining_loan_term = remaining_loan_term
        if request_date is not None:
            self.request_date = request_date
        if request_term is not None:
            self.request_term = request_term
        if t_presta_key is not None:
            self.t_presta_key = t_presta_key

    @property
    def attachments(self):
        """Gets the attachments of this Investment.  # noqa: E501


        :return: The attachments of this Investment.  # noqa: E501
        :rtype: list[LoanAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Investment.


        :param attachments: The attachments of this Investment.  # noqa: E501
        :type: list[LoanAttachment]
        """

        self._attachments = attachments

    @property
    def bank_guarantee(self):
        """Gets the bank_guarantee of this Investment.  # noqa: E501


        :return: The bank_guarantee of this Investment.  # noqa: E501
        :rtype: bool
        """
        return self._bank_guarantee

    @bank_guarantee.setter
    def bank_guarantee(self, bank_guarantee):
        """Sets the bank_guarantee of this Investment.


        :param bank_guarantee: The bank_guarantee of this Investment.  # noqa: E501
        :type: bool
        """

        self._bank_guarantee = bank_guarantee

    @property
    def buyback(self):
        """Gets the buyback of this Investment.  # noqa: E501


        :return: The buyback of this Investment.  # noqa: E501
        :rtype: bool
        """
        return self._buyback

    @buyback.setter
    def buyback(self, buyback):
        """Sets the buyback of this Investment.


        :param buyback: The buyback of this Investment.  # noqa: E501
        :type: bool
        """

        self._buyback = buyback

    @property
    def company(self):
        """Gets the company of this Investment.  # noqa: E501


        :return: The company of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Investment.


        :param company: The company of this Investment.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def country_code(self):
        """Gets the country_code of this Investment.  # noqa: E501


        :return: The country_code of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Investment.


        :param country_code: The country_code of this Investment.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def currency(self):
        """Gets the currency of this Investment.  # noqa: E501


        :return: The currency of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Investment.


        :param currency: The currency of this Investment.  # noqa: E501
        :type: str
        """
        allowed_values = ["EUR"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def date_end(self):
        """Gets the date_end of this Investment.  # noqa: E501


        :return: The date_end of this Investment.  # noqa: E501
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this Investment.


        :param date_end: The date_end of this Investment.  # noqa: E501
        :type: date
        """

        self._date_end = date_end

    @property
    def doc_id(self):
        """Gets the doc_id of this Investment.  # noqa: E501


        :return: The doc_id of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this Investment.


        :param doc_id: The doc_id of this Investment.  # noqa: E501
        :type: int
        """

        self._doc_id = doc_id

    @property
    def extended(self):
        """Gets the extended of this Investment.  # noqa: E501


        :return: The extended of this Investment.  # noqa: E501
        :rtype: bool
        """
        return self._extended

    @extended.setter
    def extended(self, extended):
        """Sets the extended of this Investment.


        :param extended: The extended of this Investment.  # noqa: E501
        :type: bool
        """

        self._extended = extended

    @property
    def fk_loan_issued_id(self):
        """Gets the fk_loan_issued_id of this Investment.  # noqa: E501


        :return: The fk_loan_issued_id of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._fk_loan_issued_id

    @fk_loan_issued_id.setter
    def fk_loan_issued_id(self, fk_loan_issued_id):
        """Sets the fk_loan_issued_id of this Investment.


        :param fk_loan_issued_id: The fk_loan_issued_id of this Investment.  # noqa: E501
        :type: int
        """

        self._fk_loan_issued_id = fk_loan_issued_id

    @property
    def fk_loan_request(self):
        """Gets the fk_loan_request of this Investment.  # noqa: E501


        :return: The fk_loan_request of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._fk_loan_request

    @fk_loan_request.setter
    def fk_loan_request(self, fk_loan_request):
        """Sets the fk_loan_request of this Investment.


        :param fk_loan_request: The fk_loan_request of this Investment.  # noqa: E501
        :type: int
        """

        self._fk_loan_request = fk_loan_request

    @property
    def funded_amount(self):
        """Gets the funded_amount of this Investment.  # noqa: E501


        :return: The funded_amount of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._funded_amount

    @funded_amount.setter
    def funded_amount(self, funded_amount):
        """Sets the funded_amount of this Investment.


        :param funded_amount: The funded_amount of this Investment.  # noqa: E501
        :type: float
        """

        self._funded_amount = funded_amount

    @property
    def guarantee(self):
        """Gets the guarantee of this Investment.  # noqa: E501


        :return: The guarantee of this Investment.  # noqa: E501
        :rtype: bool
        """
        return self._guarantee

    @guarantee.setter
    def guarantee(self, guarantee):
        """Sets the guarantee of this Investment.


        :param guarantee: The guarantee of this Investment.  # noqa: E501
        :type: bool
        """

        self._guarantee = guarantee

    @property
    def id(self):
        """Gets the id of this Investment.  # noqa: E501


        :return: The id of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Investment.


        :param id: The id of this Investment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ilsa_bonus(self):
        """Gets the ilsa_bonus of this Investment.  # noqa: E501


        :return: The ilsa_bonus of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._ilsa_bonus

    @ilsa_bonus.setter
    def ilsa_bonus(self, ilsa_bonus):
        """Sets the ilsa_bonus of this Investment.


        :param ilsa_bonus: The ilsa_bonus of this Investment.  # noqa: E501
        :type: int
        """

        self._ilsa_bonus = ilsa_bonus

    @property
    def ilsa_status(self):
        """Gets the ilsa_status of this Investment.  # noqa: E501


        :return: The ilsa_status of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._ilsa_status

    @ilsa_status.setter
    def ilsa_status(self, ilsa_status):
        """Sets the ilsa_status of this Investment.


        :param ilsa_status: The ilsa_status of this Investment.  # noqa: E501
        :type: int
        """

        self._ilsa_status = ilsa_status

    @property
    def initial_amount(self):
        """Gets the initial_amount of this Investment.  # noqa: E501


        :return: The initial_amount of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._initial_amount

    @initial_amount.setter
    def initial_amount(self, initial_amount):
        """Sets the initial_amount of this Investment.


        :param initial_amount: The initial_amount of this Investment.  # noqa: E501
        :type: float
        """

        self._initial_amount = initial_amount

    @property
    def initial_capital(self):
        """Gets the initial_capital of this Investment.  # noqa: E501


        :return: The initial_capital of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._initial_capital

    @initial_capital.setter
    def initial_capital(self, initial_capital):
        """Sets the initial_capital of this Investment.


        :param initial_capital: The initial_capital of this Investment.  # noqa: E501
        :type: float
        """

        self._initial_capital = initial_capital

    @property
    def interest(self):
        """Gets the interest of this Investment.  # noqa: E501


        :return: The interest of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this Investment.


        :param interest: The interest of this Investment.  # noqa: E501
        :type: float
        """

        self._interest = interest

    @property
    def investment_enabled(self):
        """Gets the investment_enabled of this Investment.  # noqa: E501


        :return: The investment_enabled of this Investment.  # noqa: E501
        :rtype: bool
        """
        return self._investment_enabled

    @investment_enabled.setter
    def investment_enabled(self, investment_enabled):
        """Sets the investment_enabled of this Investment.


        :param investment_enabled: The investment_enabled of this Investment.  # noqa: E501
        :type: bool
        """

        self._investment_enabled = investment_enabled

    @property
    def loan_rating(self):
        """Gets the loan_rating of this Investment.  # noqa: E501


        :return: The loan_rating of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._loan_rating

    @loan_rating.setter
    def loan_rating(self, loan_rating):
        """Sets the loan_rating of this Investment.


        :param loan_rating: The loan_rating of this Investment.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO_GUARANTEE", "BUYBACK", "PAYMENT_GUARANTEE", "BANK_GUARANTEE"]  # noqa: E501
        if loan_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_rating` ({0}), must be one of {1}"  # noqa: E501
                .format(loan_rating, allowed_values)
            )

        self._loan_rating = loan_rating

    @property
    def loan_type(self):
        """Gets the loan_type of this Investment.  # noqa: E501


        :return: The loan_type of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._loan_type

    @loan_type.setter
    def loan_type(self, loan_type):
        """Sets the loan_type of this Investment.


        :param loan_type: The loan_type of this Investment.  # noqa: E501
        :type: int
        """

        self._loan_type = loan_type

    @property
    def loan_type_name(self):
        """Gets the loan_type_name of this Investment.  # noqa: E501


        :return: The loan_type_name of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._loan_type_name

    @loan_type_name.setter
    def loan_type_name(self, loan_type_name):
        """Sets the loan_type_name of this Investment.


        :param loan_type_name: The loan_type_name of this Investment.  # noqa: E501
        :type: str
        """
        allowed_values = ["MORTGAGE", "CONSUMER", "INVOICE_FINANCING", "BUSINESS", "LINE_OF_CREDIT", "PAWNBROKING"]  # noqa: E501
        if loan_type_name not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_type_name` ({0}), must be one of {1}"  # noqa: E501
                .format(loan_type_name, allowed_values)
            )

        self._loan_type_name = loan_type_name

    @property
    def loan_payment_enabled(self):
        """Gets the loan_payment_enabled of this Investment.  # noqa: E501


        :return: The loan_payment_enabled of this Investment.  # noqa: E501
        :rtype: bool
        """
        return self._loan_payment_enabled

    @loan_payment_enabled.setter
    def loan_payment_enabled(self, loan_payment_enabled):
        """Sets the loan_payment_enabled of this Investment.


        :param loan_payment_enabled: The loan_payment_enabled of this Investment.  # noqa: E501
        :type: bool
        """

        self._loan_payment_enabled = loan_payment_enabled

    @property
    def loan_share_id(self):
        """Gets the loan_share_id of this Investment.  # noqa: E501


        :return: The loan_share_id of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._loan_share_id

    @loan_share_id.setter
    def loan_share_id(self, loan_share_id):
        """Sets the loan_share_id of this Investment.


        :param loan_share_id: The loan_share_id of this Investment.  # noqa: E501
        :type: int
        """

        self._loan_share_id = loan_share_id

    @property
    def ltv(self):
        """Gets the ltv of this Investment.  # noqa: E501


        :return: The ltv of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._ltv

    @ltv.setter
    def ltv(self, ltv):
        """Sets the ltv of this Investment.


        :param ltv: The ltv of this Investment.  # noqa: E501
        :type: float
        """

        self._ltv = ltv

    @property
    def ltv2(self):
        """Gets the ltv2 of this Investment.  # noqa: E501


        :return: The ltv2 of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._ltv2

    @ltv2.setter
    def ltv2(self, ltv2):
        """Sets the ltv2 of this Investment.


        :param ltv2: The ltv2 of this Investment.  # noqa: E501
        :type: float
        """

        self._ltv2 = ltv2

    @property
    def payment_guarantee(self):
        """Gets the payment_guarantee of this Investment.  # noqa: E501


        :return: The payment_guarantee of this Investment.  # noqa: E501
        :rtype: bool
        """
        return self._payment_guarantee

    @payment_guarantee.setter
    def payment_guarantee(self, payment_guarantee):
        """Sets the payment_guarantee of this Investment.


        :param payment_guarantee: The payment_guarantee of this Investment.  # noqa: E501
        :type: bool
        """

        self._payment_guarantee = payment_guarantee

    @property
    def price(self):
        """Gets the price of this Investment.  # noqa: E501


        :return: The price of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Investment.


        :param price: The price of this Investment.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def purchase_date(self):
        """Gets the purchase_date of this Investment.  # noqa: E501


        :return: The purchase_date of this Investment.  # noqa: E501
        :rtype: date
        """
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, purchase_date):
        """Sets the purchase_date of this Investment.


        :param purchase_date: The purchase_date of this Investment.  # noqa: E501
        :type: date
        """

        self._purchase_date = purchase_date

    @property
    def remaing_capital_after_paid_quote(self):
        """Gets the remaing_capital_after_paid_quote of this Investment.  # noqa: E501


        :return: The remaing_capital_after_paid_quote of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._remaing_capital_after_paid_quote

    @remaing_capital_after_paid_quote.setter
    def remaing_capital_after_paid_quote(self, remaing_capital_after_paid_quote):
        """Sets the remaing_capital_after_paid_quote of this Investment.


        :param remaing_capital_after_paid_quote: The remaing_capital_after_paid_quote of this Investment.  # noqa: E501
        :type: float
        """

        self._remaing_capital_after_paid_quote = remaing_capital_after_paid_quote

    @property
    def remaining_capital_for_investment(self):
        """Gets the remaining_capital_for_investment of this Investment.  # noqa: E501


        :return: The remaining_capital_for_investment of this Investment.  # noqa: E501
        :rtype: float
        """
        return self._remaining_capital_for_investment

    @remaining_capital_for_investment.setter
    def remaining_capital_for_investment(self, remaining_capital_for_investment):
        """Sets the remaining_capital_for_investment of this Investment.


        :param remaining_capital_for_investment: The remaining_capital_for_investment of this Investment.  # noqa: E501
        :type: float
        """

        self._remaining_capital_for_investment = remaining_capital_for_investment

    @property
    def remaining_loan_term(self):
        """Gets the remaining_loan_term of this Investment.  # noqa: E501


        :return: The remaining_loan_term of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._remaining_loan_term

    @remaining_loan_term.setter
    def remaining_loan_term(self, remaining_loan_term):
        """Sets the remaining_loan_term of this Investment.


        :param remaining_loan_term: The remaining_loan_term of this Investment.  # noqa: E501
        :type: int
        """

        self._remaining_loan_term = remaining_loan_term

    @property
    def request_date(self):
        """Gets the request_date of this Investment.  # noqa: E501


        :return: The request_date of this Investment.  # noqa: E501
        :rtype: date
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this Investment.


        :param request_date: The request_date of this Investment.  # noqa: E501
        :type: date
        """

        self._request_date = request_date

    @property
    def request_term(self):
        """Gets the request_term of this Investment.  # noqa: E501


        :return: The request_term of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._request_term

    @request_term.setter
    def request_term(self, request_term):
        """Sets the request_term of this Investment.


        :param request_term: The request_term of this Investment.  # noqa: E501
        :type: int
        """

        self._request_term = request_term

    @property
    def t_presta_key(self):
        """Gets the t_presta_key of this Investment.  # noqa: E501


        :return: The t_presta_key of this Investment.  # noqa: E501
        :rtype: int
        """
        return self._t_presta_key

    @t_presta_key.setter
    def t_presta_key(self, t_presta_key):
        """Sets the t_presta_key of this Investment.


        :param t_presta_key: The t_presta_key of this Investment.  # noqa: E501
        :type: int
        """

        self._t_presta_key = t_presta_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Investment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Investment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
