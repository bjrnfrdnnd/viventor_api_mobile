# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Factoring(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_sector': 'str',
        'buyer_description': 'str',
        'country': 'str',
        'date_of_incorporation': 'date',
        'invoice_insurance': 'bool',
        'recourse': 'bool',
        'seller': 'str',
        'seller_description': 'str',
        'transaction_type': 'str'
    }

    attribute_map = {
        'business_sector': 'business_sector',
        'buyer_description': 'buyer_description',
        'country': 'country',
        'date_of_incorporation': 'date_of_incorporation',
        'invoice_insurance': 'invoice_insurance',
        'recourse': 'recourse',
        'seller': 'seller',
        'seller_description': 'seller_description',
        'transaction_type': 'transaction_type'
    }

    def __init__(self, business_sector=None, buyer_description=None, country=None, date_of_incorporation=None, invoice_insurance=None, recourse=None, seller=None, seller_description=None, transaction_type=None):  # noqa: E501
        """Factoring - a model defined in Swagger"""  # noqa: E501

        self._business_sector = None
        self._buyer_description = None
        self._country = None
        self._date_of_incorporation = None
        self._invoice_insurance = None
        self._recourse = None
        self._seller = None
        self._seller_description = None
        self._transaction_type = None
        self.discriminator = None

        if business_sector is not None:
            self.business_sector = business_sector
        if buyer_description is not None:
            self.buyer_description = buyer_description
        if country is not None:
            self.country = country
        if date_of_incorporation is not None:
            self.date_of_incorporation = date_of_incorporation
        if invoice_insurance is not None:
            self.invoice_insurance = invoice_insurance
        if recourse is not None:
            self.recourse = recourse
        if seller is not None:
            self.seller = seller
        if seller_description is not None:
            self.seller_description = seller_description
        if transaction_type is not None:
            self.transaction_type = transaction_type

    @property
    def business_sector(self):
        """Gets the business_sector of this Factoring.  # noqa: E501


        :return: The business_sector of this Factoring.  # noqa: E501
        :rtype: str
        """
        return self._business_sector

    @business_sector.setter
    def business_sector(self, business_sector):
        """Sets the business_sector of this Factoring.


        :param business_sector: The business_sector of this Factoring.  # noqa: E501
        :type: str
        """

        self._business_sector = business_sector

    @property
    def buyer_description(self):
        """Gets the buyer_description of this Factoring.  # noqa: E501


        :return: The buyer_description of this Factoring.  # noqa: E501
        :rtype: str
        """
        return self._buyer_description

    @buyer_description.setter
    def buyer_description(self, buyer_description):
        """Sets the buyer_description of this Factoring.


        :param buyer_description: The buyer_description of this Factoring.  # noqa: E501
        :type: str
        """

        self._buyer_description = buyer_description

    @property
    def country(self):
        """Gets the country of this Factoring.  # noqa: E501


        :return: The country of this Factoring.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Factoring.


        :param country: The country of this Factoring.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def date_of_incorporation(self):
        """Gets the date_of_incorporation of this Factoring.  # noqa: E501


        :return: The date_of_incorporation of this Factoring.  # noqa: E501
        :rtype: date
        """
        return self._date_of_incorporation

    @date_of_incorporation.setter
    def date_of_incorporation(self, date_of_incorporation):
        """Sets the date_of_incorporation of this Factoring.


        :param date_of_incorporation: The date_of_incorporation of this Factoring.  # noqa: E501
        :type: date
        """

        self._date_of_incorporation = date_of_incorporation

    @property
    def invoice_insurance(self):
        """Gets the invoice_insurance of this Factoring.  # noqa: E501


        :return: The invoice_insurance of this Factoring.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_insurance

    @invoice_insurance.setter
    def invoice_insurance(self, invoice_insurance):
        """Sets the invoice_insurance of this Factoring.


        :param invoice_insurance: The invoice_insurance of this Factoring.  # noqa: E501
        :type: bool
        """

        self._invoice_insurance = invoice_insurance

    @property
    def recourse(self):
        """Gets the recourse of this Factoring.  # noqa: E501


        :return: The recourse of this Factoring.  # noqa: E501
        :rtype: bool
        """
        return self._recourse

    @recourse.setter
    def recourse(self, recourse):
        """Sets the recourse of this Factoring.


        :param recourse: The recourse of this Factoring.  # noqa: E501
        :type: bool
        """

        self._recourse = recourse

    @property
    def seller(self):
        """Gets the seller of this Factoring.  # noqa: E501


        :return: The seller of this Factoring.  # noqa: E501
        :rtype: str
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this Factoring.


        :param seller: The seller of this Factoring.  # noqa: E501
        :type: str
        """

        self._seller = seller

    @property
    def seller_description(self):
        """Gets the seller_description of this Factoring.  # noqa: E501


        :return: The seller_description of this Factoring.  # noqa: E501
        :rtype: str
        """
        return self._seller_description

    @seller_description.setter
    def seller_description(self, seller_description):
        """Sets the seller_description of this Factoring.


        :param seller_description: The seller_description of this Factoring.  # noqa: E501
        :type: str
        """

        self._seller_description = seller_description

    @property
    def transaction_type(self):
        """Gets the transaction_type of this Factoring.  # noqa: E501


        :return: The transaction_type of this Factoring.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this Factoring.


        :param transaction_type: The transaction_type of this Factoring.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOMESTIC", "INTERNATIONAL"]  # noqa: E501
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Factoring, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Factoring):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
