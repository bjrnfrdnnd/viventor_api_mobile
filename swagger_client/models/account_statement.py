# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bonus': 'float',
        'corrections': 'float',
        'deposit': 'float',
        'end_balance': 'float',
        'first_date': 'date',
        'fit_interest': 'float',
        'funds_in_transit': 'float',
        'funds_reserved': 'float',
        'interest_in_transit': 'float',
        'interest_received': 'float',
        'investments': 'float',
        'last_date': 'date',
        'late_fee_in_transit': 'float',
        'late_fee_received': 'float',
        'principal_in_transit': 'float',
        'principal_received': 'float',
        'results': 'list[AccountResult]',
        'secondary_market_commissions': 'float',
        'secondary_market_transactions': 'float',
        'start_balance': 'float',
        'total_movements': 'int',
        'withdrawal': 'float'
    }

    attribute_map = {
        'bonus': 'bonus',
        'corrections': 'corrections',
        'deposit': 'deposit',
        'end_balance': 'end_balance',
        'first_date': 'first_date',
        'fit_interest': 'fit_interest',
        'funds_in_transit': 'funds_in_transit',
        'funds_reserved': 'funds_reserved',
        'interest_in_transit': 'interest_in_transit',
        'interest_received': 'interest_received',
        'investments': 'investments',
        'last_date': 'last_date',
        'late_fee_in_transit': 'late_fee_in_transit',
        'late_fee_received': 'late_fee_received',
        'principal_in_transit': 'principal_in_transit',
        'principal_received': 'principal_received',
        'results': 'results',
        'secondary_market_commissions': 'secondary_market_commissions',
        'secondary_market_transactions': 'secondary_market_transactions',
        'start_balance': 'start_balance',
        'total_movements': 'total_movements',
        'withdrawal': 'withdrawal'
    }

    def __init__(self, bonus=None, corrections=None, deposit=None, end_balance=None, first_date=None, fit_interest=None, funds_in_transit=None, funds_reserved=None, interest_in_transit=None, interest_received=None, investments=None, last_date=None, late_fee_in_transit=None, late_fee_received=None, principal_in_transit=None, principal_received=None, results=None, secondary_market_commissions=None, secondary_market_transactions=None, start_balance=None, total_movements=None, withdrawal=None):  # noqa: E501
        """AccountStatement - a model defined in Swagger"""  # noqa: E501

        self._bonus = None
        self._corrections = None
        self._deposit = None
        self._end_balance = None
        self._first_date = None
        self._fit_interest = None
        self._funds_in_transit = None
        self._funds_reserved = None
        self._interest_in_transit = None
        self._interest_received = None
        self._investments = None
        self._last_date = None
        self._late_fee_in_transit = None
        self._late_fee_received = None
        self._principal_in_transit = None
        self._principal_received = None
        self._results = None
        self._secondary_market_commissions = None
        self._secondary_market_transactions = None
        self._start_balance = None
        self._total_movements = None
        self._withdrawal = None
        self.discriminator = None

        if bonus is not None:
            self.bonus = bonus
        if corrections is not None:
            self.corrections = corrections
        if deposit is not None:
            self.deposit = deposit
        if end_balance is not None:
            self.end_balance = end_balance
        if first_date is not None:
            self.first_date = first_date
        if fit_interest is not None:
            self.fit_interest = fit_interest
        if funds_in_transit is not None:
            self.funds_in_transit = funds_in_transit
        if funds_reserved is not None:
            self.funds_reserved = funds_reserved
        if interest_in_transit is not None:
            self.interest_in_transit = interest_in_transit
        if interest_received is not None:
            self.interest_received = interest_received
        if investments is not None:
            self.investments = investments
        if last_date is not None:
            self.last_date = last_date
        if late_fee_in_transit is not None:
            self.late_fee_in_transit = late_fee_in_transit
        if late_fee_received is not None:
            self.late_fee_received = late_fee_received
        if principal_in_transit is not None:
            self.principal_in_transit = principal_in_transit
        if principal_received is not None:
            self.principal_received = principal_received
        if results is not None:
            self.results = results
        if secondary_market_commissions is not None:
            self.secondary_market_commissions = secondary_market_commissions
        if secondary_market_transactions is not None:
            self.secondary_market_transactions = secondary_market_transactions
        if start_balance is not None:
            self.start_balance = start_balance
        if total_movements is not None:
            self.total_movements = total_movements
        if withdrawal is not None:
            self.withdrawal = withdrawal

    @property
    def bonus(self):
        """Gets the bonus of this AccountStatement.  # noqa: E501


        :return: The bonus of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """Sets the bonus of this AccountStatement.


        :param bonus: The bonus of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._bonus = bonus

    @property
    def corrections(self):
        """Gets the corrections of this AccountStatement.  # noqa: E501


        :return: The corrections of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._corrections

    @corrections.setter
    def corrections(self, corrections):
        """Sets the corrections of this AccountStatement.


        :param corrections: The corrections of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._corrections = corrections

    @property
    def deposit(self):
        """Gets the deposit of this AccountStatement.  # noqa: E501


        :return: The deposit of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this AccountStatement.


        :param deposit: The deposit of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._deposit = deposit

    @property
    def end_balance(self):
        """Gets the end_balance of this AccountStatement.  # noqa: E501


        :return: The end_balance of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._end_balance

    @end_balance.setter
    def end_balance(self, end_balance):
        """Sets the end_balance of this AccountStatement.


        :param end_balance: The end_balance of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._end_balance = end_balance

    @property
    def first_date(self):
        """Gets the first_date of this AccountStatement.  # noqa: E501


        :return: The first_date of this AccountStatement.  # noqa: E501
        :rtype: date
        """
        return self._first_date

    @first_date.setter
    def first_date(self, first_date):
        """Sets the first_date of this AccountStatement.


        :param first_date: The first_date of this AccountStatement.  # noqa: E501
        :type: date
        """

        self._first_date = first_date

    @property
    def fit_interest(self):
        """Gets the fit_interest of this AccountStatement.  # noqa: E501


        :return: The fit_interest of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._fit_interest

    @fit_interest.setter
    def fit_interest(self, fit_interest):
        """Sets the fit_interest of this AccountStatement.


        :param fit_interest: The fit_interest of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._fit_interest = fit_interest

    @property
    def funds_in_transit(self):
        """Gets the funds_in_transit of this AccountStatement.  # noqa: E501


        :return: The funds_in_transit of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._funds_in_transit

    @funds_in_transit.setter
    def funds_in_transit(self, funds_in_transit):
        """Sets the funds_in_transit of this AccountStatement.


        :param funds_in_transit: The funds_in_transit of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._funds_in_transit = funds_in_transit

    @property
    def funds_reserved(self):
        """Gets the funds_reserved of this AccountStatement.  # noqa: E501


        :return: The funds_reserved of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._funds_reserved

    @funds_reserved.setter
    def funds_reserved(self, funds_reserved):
        """Sets the funds_reserved of this AccountStatement.


        :param funds_reserved: The funds_reserved of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._funds_reserved = funds_reserved

    @property
    def interest_in_transit(self):
        """Gets the interest_in_transit of this AccountStatement.  # noqa: E501


        :return: The interest_in_transit of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._interest_in_transit

    @interest_in_transit.setter
    def interest_in_transit(self, interest_in_transit):
        """Sets the interest_in_transit of this AccountStatement.


        :param interest_in_transit: The interest_in_transit of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._interest_in_transit = interest_in_transit

    @property
    def interest_received(self):
        """Gets the interest_received of this AccountStatement.  # noqa: E501


        :return: The interest_received of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._interest_received

    @interest_received.setter
    def interest_received(self, interest_received):
        """Sets the interest_received of this AccountStatement.


        :param interest_received: The interest_received of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._interest_received = interest_received

    @property
    def investments(self):
        """Gets the investments of this AccountStatement.  # noqa: E501


        :return: The investments of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._investments

    @investments.setter
    def investments(self, investments):
        """Sets the investments of this AccountStatement.


        :param investments: The investments of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._investments = investments

    @property
    def last_date(self):
        """Gets the last_date of this AccountStatement.  # noqa: E501


        :return: The last_date of this AccountStatement.  # noqa: E501
        :rtype: date
        """
        return self._last_date

    @last_date.setter
    def last_date(self, last_date):
        """Sets the last_date of this AccountStatement.


        :param last_date: The last_date of this AccountStatement.  # noqa: E501
        :type: date
        """

        self._last_date = last_date

    @property
    def late_fee_in_transit(self):
        """Gets the late_fee_in_transit of this AccountStatement.  # noqa: E501


        :return: The late_fee_in_transit of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._late_fee_in_transit

    @late_fee_in_transit.setter
    def late_fee_in_transit(self, late_fee_in_transit):
        """Sets the late_fee_in_transit of this AccountStatement.


        :param late_fee_in_transit: The late_fee_in_transit of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._late_fee_in_transit = late_fee_in_transit

    @property
    def late_fee_received(self):
        """Gets the late_fee_received of this AccountStatement.  # noqa: E501


        :return: The late_fee_received of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._late_fee_received

    @late_fee_received.setter
    def late_fee_received(self, late_fee_received):
        """Sets the late_fee_received of this AccountStatement.


        :param late_fee_received: The late_fee_received of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._late_fee_received = late_fee_received

    @property
    def principal_in_transit(self):
        """Gets the principal_in_transit of this AccountStatement.  # noqa: E501


        :return: The principal_in_transit of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._principal_in_transit

    @principal_in_transit.setter
    def principal_in_transit(self, principal_in_transit):
        """Sets the principal_in_transit of this AccountStatement.


        :param principal_in_transit: The principal_in_transit of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._principal_in_transit = principal_in_transit

    @property
    def principal_received(self):
        """Gets the principal_received of this AccountStatement.  # noqa: E501


        :return: The principal_received of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._principal_received

    @principal_received.setter
    def principal_received(self, principal_received):
        """Sets the principal_received of this AccountStatement.


        :param principal_received: The principal_received of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._principal_received = principal_received

    @property
    def results(self):
        """Gets the results of this AccountStatement.  # noqa: E501


        :return: The results of this AccountStatement.  # noqa: E501
        :rtype: list[AccountResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this AccountStatement.


        :param results: The results of this AccountStatement.  # noqa: E501
        :type: list[AccountResult]
        """

        self._results = results

    @property
    def secondary_market_commissions(self):
        """Gets the secondary_market_commissions of this AccountStatement.  # noqa: E501


        :return: The secondary_market_commissions of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._secondary_market_commissions

    @secondary_market_commissions.setter
    def secondary_market_commissions(self, secondary_market_commissions):
        """Sets the secondary_market_commissions of this AccountStatement.


        :param secondary_market_commissions: The secondary_market_commissions of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._secondary_market_commissions = secondary_market_commissions

    @property
    def secondary_market_transactions(self):
        """Gets the secondary_market_transactions of this AccountStatement.  # noqa: E501


        :return: The secondary_market_transactions of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._secondary_market_transactions

    @secondary_market_transactions.setter
    def secondary_market_transactions(self, secondary_market_transactions):
        """Sets the secondary_market_transactions of this AccountStatement.


        :param secondary_market_transactions: The secondary_market_transactions of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._secondary_market_transactions = secondary_market_transactions

    @property
    def start_balance(self):
        """Gets the start_balance of this AccountStatement.  # noqa: E501


        :return: The start_balance of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._start_balance

    @start_balance.setter
    def start_balance(self, start_balance):
        """Sets the start_balance of this AccountStatement.


        :param start_balance: The start_balance of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._start_balance = start_balance

    @property
    def total_movements(self):
        """Gets the total_movements of this AccountStatement.  # noqa: E501


        :return: The total_movements of this AccountStatement.  # noqa: E501
        :rtype: int
        """
        return self._total_movements

    @total_movements.setter
    def total_movements(self, total_movements):
        """Sets the total_movements of this AccountStatement.


        :param total_movements: The total_movements of this AccountStatement.  # noqa: E501
        :type: int
        """

        self._total_movements = total_movements

    @property
    def withdrawal(self):
        """Gets the withdrawal of this AccountStatement.  # noqa: E501


        :return: The withdrawal of this AccountStatement.  # noqa: E501
        :rtype: float
        """
        return self._withdrawal

    @withdrawal.setter
    def withdrawal(self, withdrawal):
        """Sets the withdrawal of this AccountStatement.


        :param withdrawal: The withdrawal of this AccountStatement.  # noqa: E501
        :type: float
        """

        self._withdrawal = withdrawal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
