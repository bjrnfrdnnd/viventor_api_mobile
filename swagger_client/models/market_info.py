# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MarketInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'items_my_investments_filtered': 'list[Investment]',
        'items_primary_filtered': 'list[LoanPrimary]',
        'items_secondary_filtered': 'list[LoanSecondary]',
        'loan_request_status': 'int',
        'max_interest_rate': 'int',
        'max_ltv': 'int',
        'max_remaining_loan_term': 'int',
        'min_interest_rate': 'int',
        'min_ltv': 'int',
        'min_remaining_loan_term': 'int',
        'total_my_investments': 'int',
        'total_my_investments_filtered': 'int',
        'total_primary': 'int',
        'total_primary_filtered': 'int',
        'total_secondary': 'int',
        'total_secondary_filtered': 'int'
    }

    attribute_map = {
        'items_my_investments_filtered': 'itemsMyInvestmentsFiltered',
        'items_primary_filtered': 'itemsPrimaryFiltered',
        'items_secondary_filtered': 'itemsSecondaryFiltered',
        'loan_request_status': 'loan_request_status',
        'max_interest_rate': 'max_interest_rate',
        'max_ltv': 'max_ltv',
        'max_remaining_loan_term': 'max_remaining_loan_term',
        'min_interest_rate': 'min_interest_rate',
        'min_ltv': 'min_ltv',
        'min_remaining_loan_term': 'min_remaining_loan_term',
        'total_my_investments': 'totalMyInvestments',
        'total_my_investments_filtered': 'totalMyInvestmentsFiltered',
        'total_primary': 'totalPrimary',
        'total_primary_filtered': 'totalPrimaryFiltered',
        'total_secondary': 'totalSecondary',
        'total_secondary_filtered': 'totalSecondaryFiltered'
    }

    def __init__(self, items_my_investments_filtered=None, items_primary_filtered=None, items_secondary_filtered=None, loan_request_status=None, max_interest_rate=None, max_ltv=None, max_remaining_loan_term=None, min_interest_rate=None, min_ltv=None, min_remaining_loan_term=None, total_my_investments=None, total_my_investments_filtered=None, total_primary=None, total_primary_filtered=None, total_secondary=None, total_secondary_filtered=None):  # noqa: E501
        """MarketInfo - a model defined in Swagger"""  # noqa: E501

        self._items_my_investments_filtered = None
        self._items_primary_filtered = None
        self._items_secondary_filtered = None
        self._loan_request_status = None
        self._max_interest_rate = None
        self._max_ltv = None
        self._max_remaining_loan_term = None
        self._min_interest_rate = None
        self._min_ltv = None
        self._min_remaining_loan_term = None
        self._total_my_investments = None
        self._total_my_investments_filtered = None
        self._total_primary = None
        self._total_primary_filtered = None
        self._total_secondary = None
        self._total_secondary_filtered = None
        self.discriminator = None

        if items_my_investments_filtered is not None:
            self.items_my_investments_filtered = items_my_investments_filtered
        if items_primary_filtered is not None:
            self.items_primary_filtered = items_primary_filtered
        if items_secondary_filtered is not None:
            self.items_secondary_filtered = items_secondary_filtered
        if loan_request_status is not None:
            self.loan_request_status = loan_request_status
        if max_interest_rate is not None:
            self.max_interest_rate = max_interest_rate
        if max_ltv is not None:
            self.max_ltv = max_ltv
        if max_remaining_loan_term is not None:
            self.max_remaining_loan_term = max_remaining_loan_term
        if min_interest_rate is not None:
            self.min_interest_rate = min_interest_rate
        if min_ltv is not None:
            self.min_ltv = min_ltv
        if min_remaining_loan_term is not None:
            self.min_remaining_loan_term = min_remaining_loan_term
        if total_my_investments is not None:
            self.total_my_investments = total_my_investments
        if total_my_investments_filtered is not None:
            self.total_my_investments_filtered = total_my_investments_filtered
        if total_primary is not None:
            self.total_primary = total_primary
        if total_primary_filtered is not None:
            self.total_primary_filtered = total_primary_filtered
        if total_secondary is not None:
            self.total_secondary = total_secondary
        if total_secondary_filtered is not None:
            self.total_secondary_filtered = total_secondary_filtered

    @property
    def items_my_investments_filtered(self):
        """Gets the items_my_investments_filtered of this MarketInfo.  # noqa: E501


        :return: The items_my_investments_filtered of this MarketInfo.  # noqa: E501
        :rtype: list[Investment]
        """
        return self._items_my_investments_filtered

    @items_my_investments_filtered.setter
    def items_my_investments_filtered(self, items_my_investments_filtered):
        """Sets the items_my_investments_filtered of this MarketInfo.


        :param items_my_investments_filtered: The items_my_investments_filtered of this MarketInfo.  # noqa: E501
        :type: list[Investment]
        """

        self._items_my_investments_filtered = items_my_investments_filtered

    @property
    def items_primary_filtered(self):
        """Gets the items_primary_filtered of this MarketInfo.  # noqa: E501


        :return: The items_primary_filtered of this MarketInfo.  # noqa: E501
        :rtype: list[LoanPrimary]
        """
        return self._items_primary_filtered

    @items_primary_filtered.setter
    def items_primary_filtered(self, items_primary_filtered):
        """Sets the items_primary_filtered of this MarketInfo.


        :param items_primary_filtered: The items_primary_filtered of this MarketInfo.  # noqa: E501
        :type: list[LoanPrimary]
        """

        self._items_primary_filtered = items_primary_filtered

    @property
    def items_secondary_filtered(self):
        """Gets the items_secondary_filtered of this MarketInfo.  # noqa: E501


        :return: The items_secondary_filtered of this MarketInfo.  # noqa: E501
        :rtype: list[LoanSecondary]
        """
        return self._items_secondary_filtered

    @items_secondary_filtered.setter
    def items_secondary_filtered(self, items_secondary_filtered):
        """Sets the items_secondary_filtered of this MarketInfo.


        :param items_secondary_filtered: The items_secondary_filtered of this MarketInfo.  # noqa: E501
        :type: list[LoanSecondary]
        """

        self._items_secondary_filtered = items_secondary_filtered

    @property
    def loan_request_status(self):
        """Gets the loan_request_status of this MarketInfo.  # noqa: E501


        :return: The loan_request_status of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._loan_request_status

    @loan_request_status.setter
    def loan_request_status(self, loan_request_status):
        """Sets the loan_request_status of this MarketInfo.


        :param loan_request_status: The loan_request_status of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._loan_request_status = loan_request_status

    @property
    def max_interest_rate(self):
        """Gets the max_interest_rate of this MarketInfo.  # noqa: E501


        :return: The max_interest_rate of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_interest_rate

    @max_interest_rate.setter
    def max_interest_rate(self, max_interest_rate):
        """Sets the max_interest_rate of this MarketInfo.


        :param max_interest_rate: The max_interest_rate of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._max_interest_rate = max_interest_rate

    @property
    def max_ltv(self):
        """Gets the max_ltv of this MarketInfo.  # noqa: E501


        :return: The max_ltv of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_ltv

    @max_ltv.setter
    def max_ltv(self, max_ltv):
        """Sets the max_ltv of this MarketInfo.


        :param max_ltv: The max_ltv of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._max_ltv = max_ltv

    @property
    def max_remaining_loan_term(self):
        """Gets the max_remaining_loan_term of this MarketInfo.  # noqa: E501


        :return: The max_remaining_loan_term of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_remaining_loan_term

    @max_remaining_loan_term.setter
    def max_remaining_loan_term(self, max_remaining_loan_term):
        """Sets the max_remaining_loan_term of this MarketInfo.


        :param max_remaining_loan_term: The max_remaining_loan_term of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._max_remaining_loan_term = max_remaining_loan_term

    @property
    def min_interest_rate(self):
        """Gets the min_interest_rate of this MarketInfo.  # noqa: E501


        :return: The min_interest_rate of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._min_interest_rate

    @min_interest_rate.setter
    def min_interest_rate(self, min_interest_rate):
        """Sets the min_interest_rate of this MarketInfo.


        :param min_interest_rate: The min_interest_rate of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._min_interest_rate = min_interest_rate

    @property
    def min_ltv(self):
        """Gets the min_ltv of this MarketInfo.  # noqa: E501


        :return: The min_ltv of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._min_ltv

    @min_ltv.setter
    def min_ltv(self, min_ltv):
        """Sets the min_ltv of this MarketInfo.


        :param min_ltv: The min_ltv of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._min_ltv = min_ltv

    @property
    def min_remaining_loan_term(self):
        """Gets the min_remaining_loan_term of this MarketInfo.  # noqa: E501


        :return: The min_remaining_loan_term of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._min_remaining_loan_term

    @min_remaining_loan_term.setter
    def min_remaining_loan_term(self, min_remaining_loan_term):
        """Sets the min_remaining_loan_term of this MarketInfo.


        :param min_remaining_loan_term: The min_remaining_loan_term of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._min_remaining_loan_term = min_remaining_loan_term

    @property
    def total_my_investments(self):
        """Gets the total_my_investments of this MarketInfo.  # noqa: E501


        :return: The total_my_investments of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_my_investments

    @total_my_investments.setter
    def total_my_investments(self, total_my_investments):
        """Sets the total_my_investments of this MarketInfo.


        :param total_my_investments: The total_my_investments of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._total_my_investments = total_my_investments

    @property
    def total_my_investments_filtered(self):
        """Gets the total_my_investments_filtered of this MarketInfo.  # noqa: E501


        :return: The total_my_investments_filtered of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_my_investments_filtered

    @total_my_investments_filtered.setter
    def total_my_investments_filtered(self, total_my_investments_filtered):
        """Sets the total_my_investments_filtered of this MarketInfo.


        :param total_my_investments_filtered: The total_my_investments_filtered of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._total_my_investments_filtered = total_my_investments_filtered

    @property
    def total_primary(self):
        """Gets the total_primary of this MarketInfo.  # noqa: E501


        :return: The total_primary of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_primary

    @total_primary.setter
    def total_primary(self, total_primary):
        """Sets the total_primary of this MarketInfo.


        :param total_primary: The total_primary of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._total_primary = total_primary

    @property
    def total_primary_filtered(self):
        """Gets the total_primary_filtered of this MarketInfo.  # noqa: E501


        :return: The total_primary_filtered of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_primary_filtered

    @total_primary_filtered.setter
    def total_primary_filtered(self, total_primary_filtered):
        """Sets the total_primary_filtered of this MarketInfo.


        :param total_primary_filtered: The total_primary_filtered of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._total_primary_filtered = total_primary_filtered

    @property
    def total_secondary(self):
        """Gets the total_secondary of this MarketInfo.  # noqa: E501


        :return: The total_secondary of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_secondary

    @total_secondary.setter
    def total_secondary(self, total_secondary):
        """Sets the total_secondary of this MarketInfo.


        :param total_secondary: The total_secondary of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._total_secondary = total_secondary

    @property
    def total_secondary_filtered(self):
        """Gets the total_secondary_filtered of this MarketInfo.  # noqa: E501


        :return: The total_secondary_filtered of this MarketInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_secondary_filtered

    @total_secondary_filtered.setter
    def total_secondary_filtered(self, total_secondary_filtered):
        """Sets the total_secondary_filtered of this MarketInfo.


        :param total_secondary_filtered: The total_secondary_filtered of this MarketInfo.  # noqa: E501
        :type: int
        """

        self._total_secondary_filtered = total_secondary_filtered

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
