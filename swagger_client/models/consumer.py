# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Consumer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'int',
        'dependants': 'int',
        'gender': 'str',
        'income': 'float',
        'liabilities': 'float',
        'loan_count': 'int',
        'location': 'str',
        'marital_status': 'str',
        'occupation': 'str'
    }

    attribute_map = {
        'age': 'age',
        'dependants': 'dependants',
        'gender': 'gender',
        'income': 'income',
        'liabilities': 'liabilities',
        'loan_count': 'loan_count',
        'location': 'location',
        'marital_status': 'marital_status',
        'occupation': 'occupation'
    }

    def __init__(self, age=None, dependants=None, gender=None, income=None, liabilities=None, loan_count=None, location=None, marital_status=None, occupation=None):  # noqa: E501
        """Consumer - a model defined in Swagger"""  # noqa: E501

        self._age = None
        self._dependants = None
        self._gender = None
        self._income = None
        self._liabilities = None
        self._loan_count = None
        self._location = None
        self._marital_status = None
        self._occupation = None
        self.discriminator = None

        if age is not None:
            self.age = age
        if dependants is not None:
            self.dependants = dependants
        if gender is not None:
            self.gender = gender
        if income is not None:
            self.income = income
        if liabilities is not None:
            self.liabilities = liabilities
        if loan_count is not None:
            self.loan_count = loan_count
        if location is not None:
            self.location = location
        if marital_status is not None:
            self.marital_status = marital_status
        if occupation is not None:
            self.occupation = occupation

    @property
    def age(self):
        """Gets the age of this Consumer.  # noqa: E501


        :return: The age of this Consumer.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Consumer.


        :param age: The age of this Consumer.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def dependants(self):
        """Gets the dependants of this Consumer.  # noqa: E501


        :return: The dependants of this Consumer.  # noqa: E501
        :rtype: int
        """
        return self._dependants

    @dependants.setter
    def dependants(self, dependants):
        """Sets the dependants of this Consumer.


        :param dependants: The dependants of this Consumer.  # noqa: E501
        :type: int
        """

        self._dependants = dependants

    @property
    def gender(self):
        """Gets the gender of this Consumer.  # noqa: E501


        :return: The gender of this Consumer.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Consumer.


        :param gender: The gender of this Consumer.  # noqa: E501
        :type: str
        """
        allowed_values = ["MALE", "FEMALE"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def income(self):
        """Gets the income of this Consumer.  # noqa: E501


        :return: The income of this Consumer.  # noqa: E501
        :rtype: float
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this Consumer.


        :param income: The income of this Consumer.  # noqa: E501
        :type: float
        """

        self._income = income

    @property
    def liabilities(self):
        """Gets the liabilities of this Consumer.  # noqa: E501


        :return: The liabilities of this Consumer.  # noqa: E501
        :rtype: float
        """
        return self._liabilities

    @liabilities.setter
    def liabilities(self, liabilities):
        """Sets the liabilities of this Consumer.


        :param liabilities: The liabilities of this Consumer.  # noqa: E501
        :type: float
        """

        self._liabilities = liabilities

    @property
    def loan_count(self):
        """Gets the loan_count of this Consumer.  # noqa: E501


        :return: The loan_count of this Consumer.  # noqa: E501
        :rtype: int
        """
        return self._loan_count

    @loan_count.setter
    def loan_count(self, loan_count):
        """Sets the loan_count of this Consumer.


        :param loan_count: The loan_count of this Consumer.  # noqa: E501
        :type: int
        """

        self._loan_count = loan_count

    @property
    def location(self):
        """Gets the location of this Consumer.  # noqa: E501


        :return: The location of this Consumer.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Consumer.


        :param location: The location of this Consumer.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def marital_status(self):
        """Gets the marital_status of this Consumer.  # noqa: E501


        :return: The marital_status of this Consumer.  # noqa: E501
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this Consumer.


        :param marital_status: The marital_status of this Consumer.  # noqa: E501
        :type: str
        """
        allowed_values = ["SINGLE", "MARRIED"]  # noqa: E501
        if marital_status not in allowed_values:
            raise ValueError(
                "Invalid value for `marital_status` ({0}), must be one of {1}"  # noqa: E501
                .format(marital_status, allowed_values)
            )

        self._marital_status = marital_status

    @property
    def occupation(self):
        """Gets the occupation of this Consumer.  # noqa: E501


        :return: The occupation of this Consumer.  # noqa: E501
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this Consumer.


        :param occupation: The occupation of this Consumer.  # noqa: E501
        :type: str
        """

        self._occupation = occupation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Consumer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Consumer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
