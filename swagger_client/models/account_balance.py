# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_interest': 'float',
        'earned_so_far': 'float',
        'funds_available': 'float',
        'funds_invested': 'float',
        'normalized_xirr': 'float',
        'total_amount': 'float',
        'xirr': 'float'
    }

    attribute_map = {
        'actual_interest': 'actual_interest',
        'earned_so_far': 'earned_so_far',
        'funds_available': 'funds_available',
        'funds_invested': 'funds_invested',
        'normalized_xirr': 'normalized_xirr',
        'total_amount': 'total_amount',
        'xirr': 'xirr'
    }

    def __init__(self, actual_interest=None, earned_so_far=None, funds_available=None, funds_invested=None, normalized_xirr=None, total_amount=None, xirr=None):  # noqa: E501
        """AccountBalance - a model defined in Swagger"""  # noqa: E501

        self._actual_interest = None
        self._earned_so_far = None
        self._funds_available = None
        self._funds_invested = None
        self._normalized_xirr = None
        self._total_amount = None
        self._xirr = None
        self.discriminator = None

        if actual_interest is not None:
            self.actual_interest = actual_interest
        if earned_so_far is not None:
            self.earned_so_far = earned_so_far
        if funds_available is not None:
            self.funds_available = funds_available
        if funds_invested is not None:
            self.funds_invested = funds_invested
        if normalized_xirr is not None:
            self.normalized_xirr = normalized_xirr
        if total_amount is not None:
            self.total_amount = total_amount
        if xirr is not None:
            self.xirr = xirr

    @property
    def actual_interest(self):
        """Gets the actual_interest of this AccountBalance.  # noqa: E501


        :return: The actual_interest of this AccountBalance.  # noqa: E501
        :rtype: float
        """
        return self._actual_interest

    @actual_interest.setter
    def actual_interest(self, actual_interest):
        """Sets the actual_interest of this AccountBalance.


        :param actual_interest: The actual_interest of this AccountBalance.  # noqa: E501
        :type: float
        """

        self._actual_interest = actual_interest

    @property
    def earned_so_far(self):
        """Gets the earned_so_far of this AccountBalance.  # noqa: E501


        :return: The earned_so_far of this AccountBalance.  # noqa: E501
        :rtype: float
        """
        return self._earned_so_far

    @earned_so_far.setter
    def earned_so_far(self, earned_so_far):
        """Sets the earned_so_far of this AccountBalance.


        :param earned_so_far: The earned_so_far of this AccountBalance.  # noqa: E501
        :type: float
        """

        self._earned_so_far = earned_so_far

    @property
    def funds_available(self):
        """Gets the funds_available of this AccountBalance.  # noqa: E501


        :return: The funds_available of this AccountBalance.  # noqa: E501
        :rtype: float
        """
        return self._funds_available

    @funds_available.setter
    def funds_available(self, funds_available):
        """Sets the funds_available of this AccountBalance.


        :param funds_available: The funds_available of this AccountBalance.  # noqa: E501
        :type: float
        """

        self._funds_available = funds_available

    @property
    def funds_invested(self):
        """Gets the funds_invested of this AccountBalance.  # noqa: E501


        :return: The funds_invested of this AccountBalance.  # noqa: E501
        :rtype: float
        """
        return self._funds_invested

    @funds_invested.setter
    def funds_invested(self, funds_invested):
        """Sets the funds_invested of this AccountBalance.


        :param funds_invested: The funds_invested of this AccountBalance.  # noqa: E501
        :type: float
        """

        self._funds_invested = funds_invested

    @property
    def normalized_xirr(self):
        """Gets the normalized_xirr of this AccountBalance.  # noqa: E501


        :return: The normalized_xirr of this AccountBalance.  # noqa: E501
        :rtype: float
        """
        return self._normalized_xirr

    @normalized_xirr.setter
    def normalized_xirr(self, normalized_xirr):
        """Sets the normalized_xirr of this AccountBalance.


        :param normalized_xirr: The normalized_xirr of this AccountBalance.  # noqa: E501
        :type: float
        """

        self._normalized_xirr = normalized_xirr

    @property
    def total_amount(self):
        """Gets the total_amount of this AccountBalance.  # noqa: E501


        :return: The total_amount of this AccountBalance.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this AccountBalance.


        :param total_amount: The total_amount of this AccountBalance.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def xirr(self):
        """Gets the xirr of this AccountBalance.  # noqa: E501


        :return: The xirr of this AccountBalance.  # noqa: E501
        :rtype: float
        """
        return self._xirr

    @xirr.setter
    def xirr(self, xirr):
        """Sets the xirr of this AccountBalance.


        :param xirr: The xirr of this AccountBalance.  # noqa: E501
        :type: float
        """

        self._xirr = xirr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
