# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AddFundsCredentials(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank': 'str',
        'beneficiary_bank_account_number': 'str',
        'beneficiary_bank_address': 'str',
        'beneficiary_bank_swift_bic_code': 'str',
        'beneficiary_name': 'str',
        'beneficiary_registration_number': 'int',
        'payment_details': 'str'
    }

    attribute_map = {
        'bank': 'bank',
        'beneficiary_bank_account_number': 'beneficiary_bank_account_number',
        'beneficiary_bank_address': 'beneficiary_bank_address',
        'beneficiary_bank_swift_bic_code': 'beneficiary_bank_swift_bic_code',
        'beneficiary_name': 'beneficiary_name',
        'beneficiary_registration_number': 'beneficiary_registration_number',
        'payment_details': 'payment_details'
    }

    def __init__(self, bank=None, beneficiary_bank_account_number=None, beneficiary_bank_address=None, beneficiary_bank_swift_bic_code=None, beneficiary_name=None, beneficiary_registration_number=None, payment_details=None):  # noqa: E501
        """AddFundsCredentials - a model defined in Swagger"""  # noqa: E501

        self._bank = None
        self._beneficiary_bank_account_number = None
        self._beneficiary_bank_address = None
        self._beneficiary_bank_swift_bic_code = None
        self._beneficiary_name = None
        self._beneficiary_registration_number = None
        self._payment_details = None
        self.discriminator = None

        if bank is not None:
            self.bank = bank
        if beneficiary_bank_account_number is not None:
            self.beneficiary_bank_account_number = beneficiary_bank_account_number
        if beneficiary_bank_address is not None:
            self.beneficiary_bank_address = beneficiary_bank_address
        if beneficiary_bank_swift_bic_code is not None:
            self.beneficiary_bank_swift_bic_code = beneficiary_bank_swift_bic_code
        if beneficiary_name is not None:
            self.beneficiary_name = beneficiary_name
        if beneficiary_registration_number is not None:
            self.beneficiary_registration_number = beneficiary_registration_number
        if payment_details is not None:
            self.payment_details = payment_details

    @property
    def bank(self):
        """Gets the bank of this AddFundsCredentials.  # noqa: E501


        :return: The bank of this AddFundsCredentials.  # noqa: E501
        :rtype: str
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this AddFundsCredentials.


        :param bank: The bank of this AddFundsCredentials.  # noqa: E501
        :type: str
        """

        self._bank = bank

    @property
    def beneficiary_bank_account_number(self):
        """Gets the beneficiary_bank_account_number of this AddFundsCredentials.  # noqa: E501


        :return: The beneficiary_bank_account_number of this AddFundsCredentials.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_bank_account_number

    @beneficiary_bank_account_number.setter
    def beneficiary_bank_account_number(self, beneficiary_bank_account_number):
        """Sets the beneficiary_bank_account_number of this AddFundsCredentials.


        :param beneficiary_bank_account_number: The beneficiary_bank_account_number of this AddFundsCredentials.  # noqa: E501
        :type: str
        """

        self._beneficiary_bank_account_number = beneficiary_bank_account_number

    @property
    def beneficiary_bank_address(self):
        """Gets the beneficiary_bank_address of this AddFundsCredentials.  # noqa: E501


        :return: The beneficiary_bank_address of this AddFundsCredentials.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_bank_address

    @beneficiary_bank_address.setter
    def beneficiary_bank_address(self, beneficiary_bank_address):
        """Sets the beneficiary_bank_address of this AddFundsCredentials.


        :param beneficiary_bank_address: The beneficiary_bank_address of this AddFundsCredentials.  # noqa: E501
        :type: str
        """

        self._beneficiary_bank_address = beneficiary_bank_address

    @property
    def beneficiary_bank_swift_bic_code(self):
        """Gets the beneficiary_bank_swift_bic_code of this AddFundsCredentials.  # noqa: E501


        :return: The beneficiary_bank_swift_bic_code of this AddFundsCredentials.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_bank_swift_bic_code

    @beneficiary_bank_swift_bic_code.setter
    def beneficiary_bank_swift_bic_code(self, beneficiary_bank_swift_bic_code):
        """Sets the beneficiary_bank_swift_bic_code of this AddFundsCredentials.


        :param beneficiary_bank_swift_bic_code: The beneficiary_bank_swift_bic_code of this AddFundsCredentials.  # noqa: E501
        :type: str
        """

        self._beneficiary_bank_swift_bic_code = beneficiary_bank_swift_bic_code

    @property
    def beneficiary_name(self):
        """Gets the beneficiary_name of this AddFundsCredentials.  # noqa: E501


        :return: The beneficiary_name of this AddFundsCredentials.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_name

    @beneficiary_name.setter
    def beneficiary_name(self, beneficiary_name):
        """Sets the beneficiary_name of this AddFundsCredentials.


        :param beneficiary_name: The beneficiary_name of this AddFundsCredentials.  # noqa: E501
        :type: str
        """

        self._beneficiary_name = beneficiary_name

    @property
    def beneficiary_registration_number(self):
        """Gets the beneficiary_registration_number of this AddFundsCredentials.  # noqa: E501


        :return: The beneficiary_registration_number of this AddFundsCredentials.  # noqa: E501
        :rtype: int
        """
        return self._beneficiary_registration_number

    @beneficiary_registration_number.setter
    def beneficiary_registration_number(self, beneficiary_registration_number):
        """Sets the beneficiary_registration_number of this AddFundsCredentials.


        :param beneficiary_registration_number: The beneficiary_registration_number of this AddFundsCredentials.  # noqa: E501
        :type: int
        """

        self._beneficiary_registration_number = beneficiary_registration_number

    @property
    def payment_details(self):
        """Gets the payment_details of this AddFundsCredentials.  # noqa: E501


        :return: The payment_details of this AddFundsCredentials.  # noqa: E501
        :rtype: str
        """
        return self._payment_details

    @payment_details.setter
    def payment_details(self, payment_details):
        """Sets the payment_details of this AddFundsCredentials.


        :param payment_details: The payment_details of this AddFundsCredentials.  # noqa: E501
        :type: str
        """

        self._payment_details = payment_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddFundsCredentials, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddFundsCredentials):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
