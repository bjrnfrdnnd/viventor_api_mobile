# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LoanSecondary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'attachments': 'list[LoanAttachment]',
        'bank_guarantee': 'bool',
        'bonus_percentage': 'float',
        'buyback': 'bool',
        'company': 'str',
        'country_code': 'str',
        'extended': 'bool',
        'ils_id': 'int',
        'ilsa_id': 'int',
        'ilsa_status': 'int',
        'interest': 'float',
        'investment_enabled': 'bool',
        'investor': 'int',
        'itv': 'float',
        'last_modification': 'datetime',
        'loan_rating': 'str',
        'loan_type': 'int',
        'loan_type_name': 'str',
        'loan_end_date': 'date',
        'loan_status': 'int',
        'ltv2': 'float',
        'outstanding': 'float',
        'payment_guarantee': 'bool',
        'price': 'float',
        'ramaining_term': 'int',
        'sec_bonus_total': 'float',
        't_presta_key': 'int',
        'term': 'int',
        'ytm': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'attachments': 'attachments',
        'bank_guarantee': 'bank_guarantee',
        'bonus_percentage': 'bonus_percentage',
        'buyback': 'buyback',
        'company': 'company',
        'country_code': 'country_code',
        'extended': 'extended',
        'ils_id': 'ilsId',
        'ilsa_id': 'ilsaId',
        'ilsa_status': 'ilsaStatus',
        'interest': 'interest',
        'investment_enabled': 'investment_enabled',
        'investor': 'investor',
        'itv': 'itv',
        'last_modification': 'last_modification',
        'loan_rating': 'loanRating',
        'loan_type': 'loanType',
        'loan_type_name': 'loanTypeName',
        'loan_end_date': 'loan_end_date',
        'loan_status': 'loan_status',
        'ltv2': 'ltv2',
        'outstanding': 'outstanding',
        'payment_guarantee': 'payment_guarantee',
        'price': 'price',
        'ramaining_term': 'ramaining_term',
        'sec_bonus_total': 'sec_bonus_total',
        't_presta_key': 't_presta_key',
        'term': 'term',
        'ytm': 'ytm'
    }

    def __init__(self, amount=None, attachments=None, bank_guarantee=None, bonus_percentage=None, buyback=None, company=None, country_code=None, extended=None, ils_id=None, ilsa_id=None, ilsa_status=None, interest=None, investment_enabled=None, investor=None, itv=None, last_modification=None, loan_rating=None, loan_type=None, loan_type_name=None, loan_end_date=None, loan_status=None, ltv2=None, outstanding=None, payment_guarantee=None, price=None, ramaining_term=None, sec_bonus_total=None, t_presta_key=None, term=None, ytm=None):  # noqa: E501
        """LoanSecondary - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._attachments = None
        self._bank_guarantee = None
        self._bonus_percentage = None
        self._buyback = None
        self._company = None
        self._country_code = None
        self._extended = None
        self._ils_id = None
        self._ilsa_id = None
        self._ilsa_status = None
        self._interest = None
        self._investment_enabled = None
        self._investor = None
        self._itv = None
        self._last_modification = None
        self._loan_rating = None
        self._loan_type = None
        self._loan_type_name = None
        self._loan_end_date = None
        self._loan_status = None
        self._ltv2 = None
        self._outstanding = None
        self._payment_guarantee = None
        self._price = None
        self._ramaining_term = None
        self._sec_bonus_total = None
        self._t_presta_key = None
        self._term = None
        self._ytm = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if attachments is not None:
            self.attachments = attachments
        if bank_guarantee is not None:
            self.bank_guarantee = bank_guarantee
        if bonus_percentage is not None:
            self.bonus_percentage = bonus_percentage
        if buyback is not None:
            self.buyback = buyback
        if company is not None:
            self.company = company
        if country_code is not None:
            self.country_code = country_code
        if extended is not None:
            self.extended = extended
        if ils_id is not None:
            self.ils_id = ils_id
        if ilsa_id is not None:
            self.ilsa_id = ilsa_id
        if ilsa_status is not None:
            self.ilsa_status = ilsa_status
        if interest is not None:
            self.interest = interest
        if investment_enabled is not None:
            self.investment_enabled = investment_enabled
        if investor is not None:
            self.investor = investor
        if itv is not None:
            self.itv = itv
        if last_modification is not None:
            self.last_modification = last_modification
        if loan_rating is not None:
            self.loan_rating = loan_rating
        if loan_type is not None:
            self.loan_type = loan_type
        if loan_type_name is not None:
            self.loan_type_name = loan_type_name
        if loan_end_date is not None:
            self.loan_end_date = loan_end_date
        if loan_status is not None:
            self.loan_status = loan_status
        if ltv2 is not None:
            self.ltv2 = ltv2
        if outstanding is not None:
            self.outstanding = outstanding
        if payment_guarantee is not None:
            self.payment_guarantee = payment_guarantee
        if price is not None:
            self.price = price
        if ramaining_term is not None:
            self.ramaining_term = ramaining_term
        if sec_bonus_total is not None:
            self.sec_bonus_total = sec_bonus_total
        if t_presta_key is not None:
            self.t_presta_key = t_presta_key
        if term is not None:
            self.term = term
        if ytm is not None:
            self.ytm = ytm

    @property
    def amount(self):
        """Gets the amount of this LoanSecondary.  # noqa: E501


        :return: The amount of this LoanSecondary.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this LoanSecondary.


        :param amount: The amount of this LoanSecondary.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def attachments(self):
        """Gets the attachments of this LoanSecondary.  # noqa: E501


        :return: The attachments of this LoanSecondary.  # noqa: E501
        :rtype: list[LoanAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this LoanSecondary.


        :param attachments: The attachments of this LoanSecondary.  # noqa: E501
        :type: list[LoanAttachment]
        """

        self._attachments = attachments

    @property
    def bank_guarantee(self):
        """Gets the bank_guarantee of this LoanSecondary.  # noqa: E501


        :return: The bank_guarantee of this LoanSecondary.  # noqa: E501
        :rtype: bool
        """
        return self._bank_guarantee

    @bank_guarantee.setter
    def bank_guarantee(self, bank_guarantee):
        """Sets the bank_guarantee of this LoanSecondary.


        :param bank_guarantee: The bank_guarantee of this LoanSecondary.  # noqa: E501
        :type: bool
        """

        self._bank_guarantee = bank_guarantee

    @property
    def bonus_percentage(self):
        """Gets the bonus_percentage of this LoanSecondary.  # noqa: E501


        :return: The bonus_percentage of this LoanSecondary.  # noqa: E501
        :rtype: float
        """
        return self._bonus_percentage

    @bonus_percentage.setter
    def bonus_percentage(self, bonus_percentage):
        """Sets the bonus_percentage of this LoanSecondary.


        :param bonus_percentage: The bonus_percentage of this LoanSecondary.  # noqa: E501
        :type: float
        """

        self._bonus_percentage = bonus_percentage

    @property
    def buyback(self):
        """Gets the buyback of this LoanSecondary.  # noqa: E501


        :return: The buyback of this LoanSecondary.  # noqa: E501
        :rtype: bool
        """
        return self._buyback

    @buyback.setter
    def buyback(self, buyback):
        """Sets the buyback of this LoanSecondary.


        :param buyback: The buyback of this LoanSecondary.  # noqa: E501
        :type: bool
        """

        self._buyback = buyback

    @property
    def company(self):
        """Gets the company of this LoanSecondary.  # noqa: E501


        :return: The company of this LoanSecondary.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this LoanSecondary.


        :param company: The company of this LoanSecondary.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def country_code(self):
        """Gets the country_code of this LoanSecondary.  # noqa: E501


        :return: The country_code of this LoanSecondary.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this LoanSecondary.


        :param country_code: The country_code of this LoanSecondary.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def extended(self):
        """Gets the extended of this LoanSecondary.  # noqa: E501


        :return: The extended of this LoanSecondary.  # noqa: E501
        :rtype: bool
        """
        return self._extended

    @extended.setter
    def extended(self, extended):
        """Sets the extended of this LoanSecondary.


        :param extended: The extended of this LoanSecondary.  # noqa: E501
        :type: bool
        """

        self._extended = extended

    @property
    def ils_id(self):
        """Gets the ils_id of this LoanSecondary.  # noqa: E501


        :return: The ils_id of this LoanSecondary.  # noqa: E501
        :rtype: int
        """
        return self._ils_id

    @ils_id.setter
    def ils_id(self, ils_id):
        """Sets the ils_id of this LoanSecondary.


        :param ils_id: The ils_id of this LoanSecondary.  # noqa: E501
        :type: int
        """

        self._ils_id = ils_id

    @property
    def ilsa_id(self):
        """Gets the ilsa_id of this LoanSecondary.  # noqa: E501


        :return: The ilsa_id of this LoanSecondary.  # noqa: E501
        :rtype: int
        """
        return self._ilsa_id

    @ilsa_id.setter
    def ilsa_id(self, ilsa_id):
        """Sets the ilsa_id of this LoanSecondary.


        :param ilsa_id: The ilsa_id of this LoanSecondary.  # noqa: E501
        :type: int
        """

        self._ilsa_id = ilsa_id

    @property
    def ilsa_status(self):
        """Gets the ilsa_status of this LoanSecondary.  # noqa: E501


        :return: The ilsa_status of this LoanSecondary.  # noqa: E501
        :rtype: int
        """
        return self._ilsa_status

    @ilsa_status.setter
    def ilsa_status(self, ilsa_status):
        """Sets the ilsa_status of this LoanSecondary.


        :param ilsa_status: The ilsa_status of this LoanSecondary.  # noqa: E501
        :type: int
        """

        self._ilsa_status = ilsa_status

    @property
    def interest(self):
        """Gets the interest of this LoanSecondary.  # noqa: E501


        :return: The interest of this LoanSecondary.  # noqa: E501
        :rtype: float
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this LoanSecondary.


        :param interest: The interest of this LoanSecondary.  # noqa: E501
        :type: float
        """

        self._interest = interest

    @property
    def investment_enabled(self):
        """Gets the investment_enabled of this LoanSecondary.  # noqa: E501


        :return: The investment_enabled of this LoanSecondary.  # noqa: E501
        :rtype: bool
        """
        return self._investment_enabled

    @investment_enabled.setter
    def investment_enabled(self, investment_enabled):
        """Sets the investment_enabled of this LoanSecondary.


        :param investment_enabled: The investment_enabled of this LoanSecondary.  # noqa: E501
        :type: bool
        """

        self._investment_enabled = investment_enabled

    @property
    def investor(self):
        """Gets the investor of this LoanSecondary.  # noqa: E501


        :return: The investor of this LoanSecondary.  # noqa: E501
        :rtype: int
        """
        return self._investor

    @investor.setter
    def investor(self, investor):
        """Sets the investor of this LoanSecondary.


        :param investor: The investor of this LoanSecondary.  # noqa: E501
        :type: int
        """

        self._investor = investor

    @property
    def itv(self):
        """Gets the itv of this LoanSecondary.  # noqa: E501


        :return: The itv of this LoanSecondary.  # noqa: E501
        :rtype: float
        """
        return self._itv

    @itv.setter
    def itv(self, itv):
        """Sets the itv of this LoanSecondary.


        :param itv: The itv of this LoanSecondary.  # noqa: E501
        :type: float
        """

        self._itv = itv

    @property
    def last_modification(self):
        """Gets the last_modification of this LoanSecondary.  # noqa: E501


        :return: The last_modification of this LoanSecondary.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification

    @last_modification.setter
    def last_modification(self, last_modification):
        """Sets the last_modification of this LoanSecondary.


        :param last_modification: The last_modification of this LoanSecondary.  # noqa: E501
        :type: datetime
        """

        self._last_modification = last_modification

    @property
    def loan_rating(self):
        """Gets the loan_rating of this LoanSecondary.  # noqa: E501


        :return: The loan_rating of this LoanSecondary.  # noqa: E501
        :rtype: str
        """
        return self._loan_rating

    @loan_rating.setter
    def loan_rating(self, loan_rating):
        """Sets the loan_rating of this LoanSecondary.


        :param loan_rating: The loan_rating of this LoanSecondary.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO_GUARANTEE", "BUYBACK", "PAYMENT_GUARANTEE", "BANK_GUARANTEE"]  # noqa: E501
        if loan_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_rating` ({0}), must be one of {1}"  # noqa: E501
                .format(loan_rating, allowed_values)
            )

        self._loan_rating = loan_rating

    @property
    def loan_type(self):
        """Gets the loan_type of this LoanSecondary.  # noqa: E501


        :return: The loan_type of this LoanSecondary.  # noqa: E501
        :rtype: int
        """
        return self._loan_type

    @loan_type.setter
    def loan_type(self, loan_type):
        """Sets the loan_type of this LoanSecondary.


        :param loan_type: The loan_type of this LoanSecondary.  # noqa: E501
        :type: int
        """

        self._loan_type = loan_type

    @property
    def loan_type_name(self):
        """Gets the loan_type_name of this LoanSecondary.  # noqa: E501


        :return: The loan_type_name of this LoanSecondary.  # noqa: E501
        :rtype: str
        """
        return self._loan_type_name

    @loan_type_name.setter
    def loan_type_name(self, loan_type_name):
        """Sets the loan_type_name of this LoanSecondary.


        :param loan_type_name: The loan_type_name of this LoanSecondary.  # noqa: E501
        :type: str
        """
        allowed_values = ["MORTGAGE", "CONSUMER", "INVOICE_FINANCING", "BUSINESS", "LINE_OF_CREDIT", "PAWNBROKING"]  # noqa: E501
        if loan_type_name not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_type_name` ({0}), must be one of {1}"  # noqa: E501
                .format(loan_type_name, allowed_values)
            )

        self._loan_type_name = loan_type_name

    @property
    def loan_end_date(self):
        """Gets the loan_end_date of this LoanSecondary.  # noqa: E501


        :return: The loan_end_date of this LoanSecondary.  # noqa: E501
        :rtype: date
        """
        return self._loan_end_date

    @loan_end_date.setter
    def loan_end_date(self, loan_end_date):
        """Sets the loan_end_date of this LoanSecondary.


        :param loan_end_date: The loan_end_date of this LoanSecondary.  # noqa: E501
        :type: date
        """

        self._loan_end_date = loan_end_date

    @property
    def loan_status(self):
        """Gets the loan_status of this LoanSecondary.  # noqa: E501


        :return: The loan_status of this LoanSecondary.  # noqa: E501
        :rtype: int
        """
        return self._loan_status

    @loan_status.setter
    def loan_status(self, loan_status):
        """Sets the loan_status of this LoanSecondary.


        :param loan_status: The loan_status of this LoanSecondary.  # noqa: E501
        :type: int
        """

        self._loan_status = loan_status

    @property
    def ltv2(self):
        """Gets the ltv2 of this LoanSecondary.  # noqa: E501


        :return: The ltv2 of this LoanSecondary.  # noqa: E501
        :rtype: float
        """
        return self._ltv2

    @ltv2.setter
    def ltv2(self, ltv2):
        """Sets the ltv2 of this LoanSecondary.


        :param ltv2: The ltv2 of this LoanSecondary.  # noqa: E501
        :type: float
        """

        self._ltv2 = ltv2

    @property
    def outstanding(self):
        """Gets the outstanding of this LoanSecondary.  # noqa: E501


        :return: The outstanding of this LoanSecondary.  # noqa: E501
        :rtype: float
        """
        return self._outstanding

    @outstanding.setter
    def outstanding(self, outstanding):
        """Sets the outstanding of this LoanSecondary.


        :param outstanding: The outstanding of this LoanSecondary.  # noqa: E501
        :type: float
        """

        self._outstanding = outstanding

    @property
    def payment_guarantee(self):
        """Gets the payment_guarantee of this LoanSecondary.  # noqa: E501


        :return: The payment_guarantee of this LoanSecondary.  # noqa: E501
        :rtype: bool
        """
        return self._payment_guarantee

    @payment_guarantee.setter
    def payment_guarantee(self, payment_guarantee):
        """Sets the payment_guarantee of this LoanSecondary.


        :param payment_guarantee: The payment_guarantee of this LoanSecondary.  # noqa: E501
        :type: bool
        """

        self._payment_guarantee = payment_guarantee

    @property
    def price(self):
        """Gets the price of this LoanSecondary.  # noqa: E501


        :return: The price of this LoanSecondary.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LoanSecondary.


        :param price: The price of this LoanSecondary.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def ramaining_term(self):
        """Gets the ramaining_term of this LoanSecondary.  # noqa: E501


        :return: The ramaining_term of this LoanSecondary.  # noqa: E501
        :rtype: int
        """
        return self._ramaining_term

    @ramaining_term.setter
    def ramaining_term(self, ramaining_term):
        """Sets the ramaining_term of this LoanSecondary.


        :param ramaining_term: The ramaining_term of this LoanSecondary.  # noqa: E501
        :type: int
        """

        self._ramaining_term = ramaining_term

    @property
    def sec_bonus_total(self):
        """Gets the sec_bonus_total of this LoanSecondary.  # noqa: E501


        :return: The sec_bonus_total of this LoanSecondary.  # noqa: E501
        :rtype: float
        """
        return self._sec_bonus_total

    @sec_bonus_total.setter
    def sec_bonus_total(self, sec_bonus_total):
        """Sets the sec_bonus_total of this LoanSecondary.


        :param sec_bonus_total: The sec_bonus_total of this LoanSecondary.  # noqa: E501
        :type: float
        """

        self._sec_bonus_total = sec_bonus_total

    @property
    def t_presta_key(self):
        """Gets the t_presta_key of this LoanSecondary.  # noqa: E501


        :return: The t_presta_key of this LoanSecondary.  # noqa: E501
        :rtype: int
        """
        return self._t_presta_key

    @t_presta_key.setter
    def t_presta_key(self, t_presta_key):
        """Sets the t_presta_key of this LoanSecondary.


        :param t_presta_key: The t_presta_key of this LoanSecondary.  # noqa: E501
        :type: int
        """

        self._t_presta_key = t_presta_key

    @property
    def term(self):
        """Gets the term of this LoanSecondary.  # noqa: E501


        :return: The term of this LoanSecondary.  # noqa: E501
        :rtype: int
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this LoanSecondary.


        :param term: The term of this LoanSecondary.  # noqa: E501
        :type: int
        """

        self._term = term

    @property
    def ytm(self):
        """Gets the ytm of this LoanSecondary.  # noqa: E501


        :return: The ytm of this LoanSecondary.  # noqa: E501
        :rtype: int
        """
        return self._ytm

    @ytm.setter
    def ytm(self, ytm):
        """Sets the ytm of this LoanSecondary.


        :param ytm: The ytm of this LoanSecondary.  # noqa: E501
        :type: int
        """

        self._ytm = ytm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanSecondary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanSecondary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
