# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FilterModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'countries': 'list[int]',
        'id': 'int',
        'loan_rating_names': 'list[str]',
        'loan_ratings': 'list[int]',
        'loan_statuses': 'list[int]',
        'loan_type_names': 'list[str]',
        'loan_types': 'list[int]',
        'max_interest_rate': 'float',
        'max_ltv': 'float',
        'max_remaining_loan_term_months': 'int',
        'min_interest_rate': 'float',
        'min_ltv': 'float',
        'min_remaining_loan_term_months': 'int',
        'my_investments': 'bool',
        'name': 'str',
        'originators': 'list[int]'
    }

    attribute_map = {
        'active': 'active',
        'countries': 'countries',
        'id': 'id',
        'loan_rating_names': 'loan_rating_names',
        'loan_ratings': 'loan_ratings',
        'loan_statuses': 'loan_statuses',
        'loan_type_names': 'loan_type_names',
        'loan_types': 'loan_types',
        'max_interest_rate': 'max_interest_rate',
        'max_ltv': 'max_ltv',
        'max_remaining_loan_term_months': 'max_remaining_loan_term_months',
        'min_interest_rate': 'min_interest_rate',
        'min_ltv': 'min_ltv',
        'min_remaining_loan_term_months': 'min_remaining_loan_term_months',
        'my_investments': 'my_investments',
        'name': 'name',
        'originators': 'originators'
    }

    def __init__(self, active=None, countries=None, id=None, loan_rating_names=None, loan_ratings=None, loan_statuses=None, loan_type_names=None, loan_types=None, max_interest_rate=None, max_ltv=None, max_remaining_loan_term_months=None, min_interest_rate=None, min_ltv=None, min_remaining_loan_term_months=None, my_investments=None, name=None, originators=None):  # noqa: E501
        """FilterModel - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._countries = None
        self._id = None
        self._loan_rating_names = None
        self._loan_ratings = None
        self._loan_statuses = None
        self._loan_type_names = None
        self._loan_types = None
        self._max_interest_rate = None
        self._max_ltv = None
        self._max_remaining_loan_term_months = None
        self._min_interest_rate = None
        self._min_ltv = None
        self._min_remaining_loan_term_months = None
        self._my_investments = None
        self._name = None
        self._originators = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if countries is not None:
            self.countries = countries
        if id is not None:
            self.id = id
        if loan_rating_names is not None:
            self.loan_rating_names = loan_rating_names
        if loan_ratings is not None:
            self.loan_ratings = loan_ratings
        if loan_statuses is not None:
            self.loan_statuses = loan_statuses
        if loan_type_names is not None:
            self.loan_type_names = loan_type_names
        if loan_types is not None:
            self.loan_types = loan_types
        if max_interest_rate is not None:
            self.max_interest_rate = max_interest_rate
        if max_ltv is not None:
            self.max_ltv = max_ltv
        if max_remaining_loan_term_months is not None:
            self.max_remaining_loan_term_months = max_remaining_loan_term_months
        if min_interest_rate is not None:
            self.min_interest_rate = min_interest_rate
        if min_ltv is not None:
            self.min_ltv = min_ltv
        if min_remaining_loan_term_months is not None:
            self.min_remaining_loan_term_months = min_remaining_loan_term_months
        if my_investments is not None:
            self.my_investments = my_investments
        if name is not None:
            self.name = name
        if originators is not None:
            self.originators = originators

    @property
    def active(self):
        """Gets the active of this FilterModel.  # noqa: E501


        :return: The active of this FilterModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this FilterModel.


        :param active: The active of this FilterModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def countries(self):
        """Gets the countries of this FilterModel.  # noqa: E501


        :return: The countries of this FilterModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this FilterModel.


        :param countries: The countries of this FilterModel.  # noqa: E501
        :type: list[int]
        """

        self._countries = countries

    @property
    def id(self):
        """Gets the id of this FilterModel.  # noqa: E501


        :return: The id of this FilterModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FilterModel.


        :param id: The id of this FilterModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def loan_rating_names(self):
        """Gets the loan_rating_names of this FilterModel.  # noqa: E501


        :return: The loan_rating_names of this FilterModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._loan_rating_names

    @loan_rating_names.setter
    def loan_rating_names(self, loan_rating_names):
        """Sets the loan_rating_names of this FilterModel.


        :param loan_rating_names: The loan_rating_names of this FilterModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NO_GUARANTEE", "BUYBACK", "PAYMENT_GUARANTEE", "BANK_GUARANTEE"]  # noqa: E501
        if not set(loan_rating_names).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `loan_rating_names` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(loan_rating_names) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._loan_rating_names = loan_rating_names

    @property
    def loan_ratings(self):
        """Gets the loan_ratings of this FilterModel.  # noqa: E501


        :return: The loan_ratings of this FilterModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._loan_ratings

    @loan_ratings.setter
    def loan_ratings(self, loan_ratings):
        """Sets the loan_ratings of this FilterModel.


        :param loan_ratings: The loan_ratings of this FilterModel.  # noqa: E501
        :type: list[int]
        """

        self._loan_ratings = loan_ratings

    @property
    def loan_statuses(self):
        """Gets the loan_statuses of this FilterModel.  # noqa: E501


        :return: The loan_statuses of this FilterModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._loan_statuses

    @loan_statuses.setter
    def loan_statuses(self, loan_statuses):
        """Sets the loan_statuses of this FilterModel.


        :param loan_statuses: The loan_statuses of this FilterModel.  # noqa: E501
        :type: list[int]
        """

        self._loan_statuses = loan_statuses

    @property
    def loan_type_names(self):
        """Gets the loan_type_names of this FilterModel.  # noqa: E501


        :return: The loan_type_names of this FilterModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._loan_type_names

    @loan_type_names.setter
    def loan_type_names(self, loan_type_names):
        """Sets the loan_type_names of this FilterModel.


        :param loan_type_names: The loan_type_names of this FilterModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["MORTGAGE", "CONSUMER", "INVOICE_FINANCING", "BUSINESS", "LINE_OF_CREDIT", "PAWNBROKING"]  # noqa: E501
        if not set(loan_type_names).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `loan_type_names` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(loan_type_names) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._loan_type_names = loan_type_names

    @property
    def loan_types(self):
        """Gets the loan_types of this FilterModel.  # noqa: E501


        :return: The loan_types of this FilterModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._loan_types

    @loan_types.setter
    def loan_types(self, loan_types):
        """Sets the loan_types of this FilterModel.


        :param loan_types: The loan_types of this FilterModel.  # noqa: E501
        :type: list[int]
        """

        self._loan_types = loan_types

    @property
    def max_interest_rate(self):
        """Gets the max_interest_rate of this FilterModel.  # noqa: E501


        :return: The max_interest_rate of this FilterModel.  # noqa: E501
        :rtype: float
        """
        return self._max_interest_rate

    @max_interest_rate.setter
    def max_interest_rate(self, max_interest_rate):
        """Sets the max_interest_rate of this FilterModel.


        :param max_interest_rate: The max_interest_rate of this FilterModel.  # noqa: E501
        :type: float
        """

        self._max_interest_rate = max_interest_rate

    @property
    def max_ltv(self):
        """Gets the max_ltv of this FilterModel.  # noqa: E501


        :return: The max_ltv of this FilterModel.  # noqa: E501
        :rtype: float
        """
        return self._max_ltv

    @max_ltv.setter
    def max_ltv(self, max_ltv):
        """Sets the max_ltv of this FilterModel.


        :param max_ltv: The max_ltv of this FilterModel.  # noqa: E501
        :type: float
        """

        self._max_ltv = max_ltv

    @property
    def max_remaining_loan_term_months(self):
        """Gets the max_remaining_loan_term_months of this FilterModel.  # noqa: E501


        :return: The max_remaining_loan_term_months of this FilterModel.  # noqa: E501
        :rtype: int
        """
        return self._max_remaining_loan_term_months

    @max_remaining_loan_term_months.setter
    def max_remaining_loan_term_months(self, max_remaining_loan_term_months):
        """Sets the max_remaining_loan_term_months of this FilterModel.


        :param max_remaining_loan_term_months: The max_remaining_loan_term_months of this FilterModel.  # noqa: E501
        :type: int
        """

        self._max_remaining_loan_term_months = max_remaining_loan_term_months

    @property
    def min_interest_rate(self):
        """Gets the min_interest_rate of this FilterModel.  # noqa: E501


        :return: The min_interest_rate of this FilterModel.  # noqa: E501
        :rtype: float
        """
        return self._min_interest_rate

    @min_interest_rate.setter
    def min_interest_rate(self, min_interest_rate):
        """Sets the min_interest_rate of this FilterModel.


        :param min_interest_rate: The min_interest_rate of this FilterModel.  # noqa: E501
        :type: float
        """

        self._min_interest_rate = min_interest_rate

    @property
    def min_ltv(self):
        """Gets the min_ltv of this FilterModel.  # noqa: E501


        :return: The min_ltv of this FilterModel.  # noqa: E501
        :rtype: float
        """
        return self._min_ltv

    @min_ltv.setter
    def min_ltv(self, min_ltv):
        """Sets the min_ltv of this FilterModel.


        :param min_ltv: The min_ltv of this FilterModel.  # noqa: E501
        :type: float
        """

        self._min_ltv = min_ltv

    @property
    def min_remaining_loan_term_months(self):
        """Gets the min_remaining_loan_term_months of this FilterModel.  # noqa: E501


        :return: The min_remaining_loan_term_months of this FilterModel.  # noqa: E501
        :rtype: int
        """
        return self._min_remaining_loan_term_months

    @min_remaining_loan_term_months.setter
    def min_remaining_loan_term_months(self, min_remaining_loan_term_months):
        """Sets the min_remaining_loan_term_months of this FilterModel.


        :param min_remaining_loan_term_months: The min_remaining_loan_term_months of this FilterModel.  # noqa: E501
        :type: int
        """

        self._min_remaining_loan_term_months = min_remaining_loan_term_months

    @property
    def my_investments(self):
        """Gets the my_investments of this FilterModel.  # noqa: E501


        :return: The my_investments of this FilterModel.  # noqa: E501
        :rtype: bool
        """
        return self._my_investments

    @my_investments.setter
    def my_investments(self, my_investments):
        """Sets the my_investments of this FilterModel.


        :param my_investments: The my_investments of this FilterModel.  # noqa: E501
        :type: bool
        """

        self._my_investments = my_investments

    @property
    def name(self):
        """Gets the name of this FilterModel.  # noqa: E501


        :return: The name of this FilterModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilterModel.


        :param name: The name of this FilterModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def originators(self):
        """Gets the originators of this FilterModel.  # noqa: E501


        :return: The originators of this FilterModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._originators

    @originators.setter
    def originators(self, originators):
        """Sets the originators of this FilterModel.


        :param originators: The originators of this FilterModel.  # noqa: E501
        :type: list[int]
        """

        self._originators = originators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
