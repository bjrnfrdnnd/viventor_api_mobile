# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccessToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'investor_id': 'int',
        'lists': 'GeneralInfo',
        'token': 'str',
        'token_expire_timestamp': 'int',
        'token_lifetime': 'int',
        'user': 'UserInfo'
    }

    attribute_map = {
        'investor_id': 'investor_id',
        'lists': 'lists',
        'token': 'token',
        'token_expire_timestamp': 'token_expire_timestamp',
        'token_lifetime': 'token_lifetime',
        'user': 'user'
    }

    def __init__(self, investor_id=None, lists=None, token=None, token_expire_timestamp=None, token_lifetime=None, user=None):  # noqa: E501
        """AccessToken - a model defined in Swagger"""  # noqa: E501

        self._investor_id = None
        self._lists = None
        self._token = None
        self._token_expire_timestamp = None
        self._token_lifetime = None
        self._user = None
        self.discriminator = None

        if investor_id is not None:
            self.investor_id = investor_id
        if lists is not None:
            self.lists = lists
        if token is not None:
            self.token = token
        if token_expire_timestamp is not None:
            self.token_expire_timestamp = token_expire_timestamp
        if token_lifetime is not None:
            self.token_lifetime = token_lifetime
        if user is not None:
            self.user = user

    @property
    def investor_id(self):
        """Gets the investor_id of this AccessToken.  # noqa: E501


        :return: The investor_id of this AccessToken.  # noqa: E501
        :rtype: int
        """
        return self._investor_id

    @investor_id.setter
    def investor_id(self, investor_id):
        """Sets the investor_id of this AccessToken.


        :param investor_id: The investor_id of this AccessToken.  # noqa: E501
        :type: int
        """

        self._investor_id = investor_id

    @property
    def lists(self):
        """Gets the lists of this AccessToken.  # noqa: E501


        :return: The lists of this AccessToken.  # noqa: E501
        :rtype: GeneralInfo
        """
        return self._lists

    @lists.setter
    def lists(self, lists):
        """Sets the lists of this AccessToken.


        :param lists: The lists of this AccessToken.  # noqa: E501
        :type: GeneralInfo
        """

        self._lists = lists

    @property
    def token(self):
        """Gets the token of this AccessToken.  # noqa: E501


        :return: The token of this AccessToken.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AccessToken.


        :param token: The token of this AccessToken.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def token_expire_timestamp(self):
        """Gets the token_expire_timestamp of this AccessToken.  # noqa: E501


        :return: The token_expire_timestamp of this AccessToken.  # noqa: E501
        :rtype: int
        """
        return self._token_expire_timestamp

    @token_expire_timestamp.setter
    def token_expire_timestamp(self, token_expire_timestamp):
        """Sets the token_expire_timestamp of this AccessToken.


        :param token_expire_timestamp: The token_expire_timestamp of this AccessToken.  # noqa: E501
        :type: int
        """

        self._token_expire_timestamp = token_expire_timestamp

    @property
    def token_lifetime(self):
        """Gets the token_lifetime of this AccessToken.  # noqa: E501


        :return: The token_lifetime of this AccessToken.  # noqa: E501
        :rtype: int
        """
        return self._token_lifetime

    @token_lifetime.setter
    def token_lifetime(self, token_lifetime):
        """Sets the token_lifetime of this AccessToken.


        :param token_lifetime: The token_lifetime of this AccessToken.  # noqa: E501
        :type: int
        """

        self._token_lifetime = token_lifetime

    @property
    def user(self):
        """Gets the user of this AccessToken.  # noqa: E501


        :return: The user of this AccessToken.  # noqa: E501
        :rtype: UserInfo
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AccessToken.


        :param user: The user of this AccessToken.  # noqa: E501
        :type: UserInfo
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
