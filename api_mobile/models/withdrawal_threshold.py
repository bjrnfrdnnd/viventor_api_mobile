# coding: utf-8

"""
    Mobile API

    All decimal values are accepted and returned with 2 decimal place precision, e.g., 150.21. All date fields are sent in ISO 8601 format YYYY-MM-DD, e.g., 2016-11-30.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WithdrawalThreshold(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disabled_due_to_account_value': 'bool',
        'disabled_due_to_funds_invested': 'bool',
        'disabled_due_to_reserved_funds': 'bool',
        'less_than_min_withdraw_disabled': 'bool',
        'min_withdraw_amount': 'float',
        'withdraw_threshold': 'float'
    }

    attribute_map = {
        'disabled_due_to_account_value': 'disabled_due_to_account_value',
        'disabled_due_to_funds_invested': 'disabled_due_to_funds_invested',
        'disabled_due_to_reserved_funds': 'disabled_due_to_reserved_funds',
        'less_than_min_withdraw_disabled': 'less_than_min_withdraw_disabled',
        'min_withdraw_amount': 'min_withdraw_amount',
        'withdraw_threshold': 'withdraw_threshold'
    }

    def __init__(self, disabled_due_to_account_value=None, disabled_due_to_funds_invested=None, disabled_due_to_reserved_funds=None, less_than_min_withdraw_disabled=None, min_withdraw_amount=None, withdraw_threshold=None):  # noqa: E501
        """WithdrawalThreshold - a model defined in Swagger"""  # noqa: E501

        self._disabled_due_to_account_value = None
        self._disabled_due_to_funds_invested = None
        self._disabled_due_to_reserved_funds = None
        self._less_than_min_withdraw_disabled = None
        self._min_withdraw_amount = None
        self._withdraw_threshold = None
        self.discriminator = None

        if disabled_due_to_account_value is not None:
            self.disabled_due_to_account_value = disabled_due_to_account_value
        if disabled_due_to_funds_invested is not None:
            self.disabled_due_to_funds_invested = disabled_due_to_funds_invested
        if disabled_due_to_reserved_funds is not None:
            self.disabled_due_to_reserved_funds = disabled_due_to_reserved_funds
        if less_than_min_withdraw_disabled is not None:
            self.less_than_min_withdraw_disabled = less_than_min_withdraw_disabled
        if min_withdraw_amount is not None:
            self.min_withdraw_amount = min_withdraw_amount
        if withdraw_threshold is not None:
            self.withdraw_threshold = withdraw_threshold

    @property
    def disabled_due_to_account_value(self):
        """Gets the disabled_due_to_account_value of this WithdrawalThreshold.  # noqa: E501


        :return: The disabled_due_to_account_value of this WithdrawalThreshold.  # noqa: E501
        :rtype: bool
        """
        return self._disabled_due_to_account_value

    @disabled_due_to_account_value.setter
    def disabled_due_to_account_value(self, disabled_due_to_account_value):
        """Sets the disabled_due_to_account_value of this WithdrawalThreshold.


        :param disabled_due_to_account_value: The disabled_due_to_account_value of this WithdrawalThreshold.  # noqa: E501
        :type: bool
        """

        self._disabled_due_to_account_value = disabled_due_to_account_value

    @property
    def disabled_due_to_funds_invested(self):
        """Gets the disabled_due_to_funds_invested of this WithdrawalThreshold.  # noqa: E501


        :return: The disabled_due_to_funds_invested of this WithdrawalThreshold.  # noqa: E501
        :rtype: bool
        """
        return self._disabled_due_to_funds_invested

    @disabled_due_to_funds_invested.setter
    def disabled_due_to_funds_invested(self, disabled_due_to_funds_invested):
        """Sets the disabled_due_to_funds_invested of this WithdrawalThreshold.


        :param disabled_due_to_funds_invested: The disabled_due_to_funds_invested of this WithdrawalThreshold.  # noqa: E501
        :type: bool
        """

        self._disabled_due_to_funds_invested = disabled_due_to_funds_invested

    @property
    def disabled_due_to_reserved_funds(self):
        """Gets the disabled_due_to_reserved_funds of this WithdrawalThreshold.  # noqa: E501


        :return: The disabled_due_to_reserved_funds of this WithdrawalThreshold.  # noqa: E501
        :rtype: bool
        """
        return self._disabled_due_to_reserved_funds

    @disabled_due_to_reserved_funds.setter
    def disabled_due_to_reserved_funds(self, disabled_due_to_reserved_funds):
        """Sets the disabled_due_to_reserved_funds of this WithdrawalThreshold.


        :param disabled_due_to_reserved_funds: The disabled_due_to_reserved_funds of this WithdrawalThreshold.  # noqa: E501
        :type: bool
        """

        self._disabled_due_to_reserved_funds = disabled_due_to_reserved_funds

    @property
    def less_than_min_withdraw_disabled(self):
        """Gets the less_than_min_withdraw_disabled of this WithdrawalThreshold.  # noqa: E501


        :return: The less_than_min_withdraw_disabled of this WithdrawalThreshold.  # noqa: E501
        :rtype: bool
        """
        return self._less_than_min_withdraw_disabled

    @less_than_min_withdraw_disabled.setter
    def less_than_min_withdraw_disabled(self, less_than_min_withdraw_disabled):
        """Sets the less_than_min_withdraw_disabled of this WithdrawalThreshold.


        :param less_than_min_withdraw_disabled: The less_than_min_withdraw_disabled of this WithdrawalThreshold.  # noqa: E501
        :type: bool
        """

        self._less_than_min_withdraw_disabled = less_than_min_withdraw_disabled

    @property
    def min_withdraw_amount(self):
        """Gets the min_withdraw_amount of this WithdrawalThreshold.  # noqa: E501


        :return: The min_withdraw_amount of this WithdrawalThreshold.  # noqa: E501
        :rtype: float
        """
        return self._min_withdraw_amount

    @min_withdraw_amount.setter
    def min_withdraw_amount(self, min_withdraw_amount):
        """Sets the min_withdraw_amount of this WithdrawalThreshold.


        :param min_withdraw_amount: The min_withdraw_amount of this WithdrawalThreshold.  # noqa: E501
        :type: float
        """

        self._min_withdraw_amount = min_withdraw_amount

    @property
    def withdraw_threshold(self):
        """Gets the withdraw_threshold of this WithdrawalThreshold.  # noqa: E501


        :return: The withdraw_threshold of this WithdrawalThreshold.  # noqa: E501
        :rtype: float
        """
        return self._withdraw_threshold

    @withdraw_threshold.setter
    def withdraw_threshold(self, withdraw_threshold):
        """Sets the withdraw_threshold of this WithdrawalThreshold.


        :param withdraw_threshold: The withdraw_threshold of this WithdrawalThreshold.  # noqa: E501
        :type: float
        """

        self._withdraw_threshold = withdraw_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WithdrawalThreshold, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WithdrawalThreshold):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
